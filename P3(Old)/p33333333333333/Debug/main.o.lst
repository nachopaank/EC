   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 18, 4
  11              		.file	"main.c"
  21              	.Ltext0:
  22              		.file 1 "../main.c"
 2760              		.align	2
 2763              	RL:
 2764 0000 00000000 		.word	0
 2765 0004 05000000 		.word	5
 2766 0008 00000000 		.word	0
 2767 000c 00000000 		.word	0
 2768              		.comm	cont,4,4
 2769              		.comm	cont2,4,4
 2770              		.comm	two,4,4
 2771              		.comm	mode,4,4
 2772              		.comm	ocupado,4,4
 2773              		.text
 2774              		.align	2
 2775              		.global	timer_ISR
 2777              	timer_ISR:
 2778              	.LFB0:
   1:../main.c     **** #include <stdio.h>
   2:../main.c     **** #include "44b.h"
   3:../main.c     **** #include "button.h"
   4:../main.c     **** #include "leds.h"
   5:../main.c     **** #include "utils.h"
   6:../main.c     **** #include "D8Led.h"
   7:../main.c     **** #include "intcontroller.h"
   8:../main.c     **** #include "timer.h"
   9:../main.c     **** #include "gpio.h"
  10:../main.c     **** #include "keyboard.h"
  11:../main.c     **** 
  12:../main.c     **** struct RLstat {
  13:../main.c     **** 	int moving;
  14:../main.c     **** 	int speed;
  15:../main.c     **** 	int direction;
  16:../main.c     **** 	int position;
  17:../main.c     **** };
  18:../main.c     **** 
  19:../main.c     **** static struct RLstat RL = {
  20:../main.c     **** 	.moving = 0,
  21:../main.c     **** 	.speed = 5,
  22:../main.c     **** 	.direction = 0,
  23:../main.c     **** 	.position = 0,
  24:../main.c     **** };
  25:../main.c     **** int cont;
  26:../main.c     **** int cont2;
  27:../main.c     **** int two;
  28:../main.c     **** int mode;
  29:../main.c     **** int ocupado;
  30:../main.c     **** void timer_ISR(void) __attribute__ ((interrupt ("IRQ")));
  31:../main.c     **** void timer1_ISR(void) __attribute__ ((interrupt ("IRQ")));
  32:../main.c     **** 
  33:../main.c     **** void button_ISR(void) __attribute__ ((interrupt ("IRQ")));
  34:../main.c     **** 
  35:../main.c     **** void keyboard_ISR(void) __attribute__ ((interrupt ("IRQ")));
  36:../main.c     **** 
  37:../main.c     **** void timer_ISR(void)
  38:../main.c     **** {
 2779              		.loc 1 38 0
 2780              		.cfi_startproc
 2781              		@ Interrupt Service Routine.
 2782              		@ args = 0, pretend = 0, frame = 0
 2783              		@ frame_needed = 1, uses_anonymous_args = 0
 2784 0000 04C02DE5 		str	ip, [sp, #-4]!
 2785 0004 0DC0A0E1 		mov	ip, sp
 2786              	.LCFI0:
 2787              		.cfi_def_cfa_register 12
 2788 0008 0FD82DE9 		stmfd	sp!, {r0, r1, r2, r3, fp, ip, lr, pc}
 2789 000c 04B04CE2 		sub	fp, ip, #4
 2790              		.cfi_offset 14, -8
 2791              		.cfi_offset 13, -12
 2792              		.cfi_offset 11, -16
 2793              		.cfi_offset 3, -20
 2794              		.cfi_offset 2, -24
 2795              		.cfi_offset 1, -28
 2796              		.cfi_offset 0, -32
 2797              	.LCFI1:
 2798              		.cfi_def_cfa 11, 4
  39:../main.c     **** 	//COMPLETAR: tomar el código de avance de posición del led rotante de la práctica anterior
  40:../main.c     **** 	if (mode == 1){
 2799              		.loc 1 40 0
 2800 0010 D4309FE5 		ldr	r3, .L4
 2801 0014 003093E5 		ldr	r3, [r3, #0]
 2802 0018 010053E3 		cmp	r3, #1
 2803 001c 1600001A 		bne	.L2
  41:../main.c     **** 		D8Led_digit(cont);
 2804              		.loc 1 41 0
 2805 0020 C8309FE5 		ldr	r3, .L4+4
 2806 0024 003093E5 		ldr	r3, [r3, #0]
 2807 0028 0300A0E1 		mov	r0, r3
 2808 002c FEFFFFEB 		bl	D8Led_digit
  42:../main.c     **** 		ic_cleanflag(INT_TIMER0);
 2809              		.loc 1 42 0
 2810 0030 0D00A0E3 		mov	r0, #13
 2811 0034 FEFFFFEB 		bl	ic_cleanflag
  43:../main.c     **** 		cont++;
 2812              		.loc 1 43 0
 2813 0038 B0309FE5 		ldr	r3, .L4+4
 2814 003c 003093E5 		ldr	r3, [r3, #0]
 2815 0040 012083E2 		add	r2, r3, #1
 2816 0044 A4309FE5 		ldr	r3, .L4+4
 2817 0048 002083E5 		str	r2, [r3, #0]
  44:../main.c     **** 		if(cont == 11){
 2818              		.loc 1 44 0
 2819 004c 9C309FE5 		ldr	r3, .L4+4
 2820 0050 003093E5 		ldr	r3, [r3, #0]
 2821 0054 0B0053E3 		cmp	r3, #11
 2822 0058 1D00001A 		bne	.L3
  45:../main.c     **** 			D8Led_segment(0);
 2823              		.loc 1 45 0
 2824 005c 0000A0E3 		mov	r0, #0
 2825 0060 FEFFFFEB 		bl	D8Led_segment
  46:../main.c     **** 			tmr_stop(TIMER0);
 2826              		.loc 1 46 0
 2827 0064 0000A0E3 		mov	r0, #0
 2828 0068 FEFFFFEB 		bl	tmr_stop
  47:../main.c     **** 			ocupado = 0;
 2829              		.loc 1 47 0
 2830 006c 80309FE5 		ldr	r3, .L4+8
 2831 0070 0020A0E3 		mov	r2, #0
 2832 0074 002083E5 		str	r2, [r3, #0]
 2833 0078 150000EA 		b	.L3
 2834              	.L2:
  48:../main.c     **** 		}
  49:../main.c     **** 	}
  50:../main.c     **** 	else{
  51:../main.c     **** 		D8Led_digit(cont);
 2835              		.loc 1 51 0
 2836 007c 6C309FE5 		ldr	r3, .L4+4
 2837 0080 003093E5 		ldr	r3, [r3, #0]
 2838 0084 0300A0E1 		mov	r0, r3
 2839 0088 FEFFFFEB 		bl	D8Led_digit
  52:../main.c     **** 		ic_cleanflag(INT_TIMER0);
 2840              		.loc 1 52 0
 2841 008c 0D00A0E3 		mov	r0, #13
 2842 0090 FEFFFFEB 		bl	ic_cleanflag
  53:../main.c     **** 		cont++;
 2843              		.loc 1 53 0
 2844 0094 54309FE5 		ldr	r3, .L4+4
 2845 0098 003093E5 		ldr	r3, [r3, #0]
 2846 009c 012083E2 		add	r2, r3, #1
 2847 00a0 48309FE5 		ldr	r3, .L4+4
 2848 00a4 002083E5 		str	r2, [r3, #0]
  54:../main.c     **** 		if(cont == 17){
 2849              		.loc 1 54 0
 2850 00a8 40309FE5 		ldr	r3, .L4+4
 2851 00ac 003093E5 		ldr	r3, [r3, #0]
 2852 00b0 110053E3 		cmp	r3, #17
 2853 00b4 0600001A 		bne	.L3
  55:../main.c     **** 			D8Led_segment(0);
 2854              		.loc 1 55 0
 2855 00b8 0000A0E3 		mov	r0, #0
 2856 00bc FEFFFFEB 		bl	D8Led_segment
  56:../main.c     **** 			tmr_stop(TIMER0);
 2857              		.loc 1 56 0
 2858 00c0 0000A0E3 		mov	r0, #0
 2859 00c4 FEFFFFEB 		bl	tmr_stop
  57:../main.c     **** 			ocupado = 0;
 2860              		.loc 1 57 0
 2861 00c8 24309FE5 		ldr	r3, .L4+8
 2862 00cc 0020A0E3 		mov	r2, #0
 2863 00d0 002083E5 		str	r2, [r3, #0]
 2864              	.L3:
  58:../main.c     **** 		}
  59:../main.c     **** 	}
  60:../main.c     **** 	ic_cleanflag(INT_TIMER0);
 2865              		.loc 1 60 0
 2866 00d4 0D00A0E3 		mov	r0, #13
 2867 00d8 FEFFFFEB 		bl	ic_cleanflag
  61:../main.c     **** }
 2868              		.loc 1 61 0
 2869 00dc 1CD04BE2 		sub	sp, fp, #28
 2870 00e0 0F689DE8 		ldmfd	sp, {r0, r1, r2, r3, fp, sp, lr}
 2871 00e4 04C09DE4 		ldmfd	sp!, {ip}
 2872 00e8 04F05EE2 		subs	pc, lr, #4
 2873              	.L5:
 2874              		.align	2
 2875              	.L4:
 2876 00ec 00000000 		.word	mode
 2877 00f0 00000000 		.word	cont
 2878 00f4 00000000 		.word	ocupado
 2879              		.cfi_endproc
 2880              	.LFE0:
 2882              		.align	2
 2883              		.global	timer1_ISR
 2885              	timer1_ISR:
 2886              	.LFB1:
  62:../main.c     **** void timer1_ISR(void)
  63:../main.c     **** {
 2887              		.loc 1 63 0
 2888              		.cfi_startproc
 2889              		@ Interrupt Service Routine.
 2890              		@ args = 0, pretend = 0, frame = 0
 2891              		@ frame_needed = 1, uses_anonymous_args = 0
 2892 00f8 04C02DE5 		str	ip, [sp, #-4]!
 2893 00fc 0DC0A0E1 		mov	ip, sp
 2894              	.LCFI2:
 2895              		.cfi_def_cfa_register 12
 2896 0100 0FD82DE9 		stmfd	sp!, {r0, r1, r2, r3, fp, ip, lr, pc}
 2897 0104 04B04CE2 		sub	fp, ip, #4
 2898              		.cfi_offset 14, -8
 2899              		.cfi_offset 13, -12
 2900              		.cfi_offset 11, -16
 2901              		.cfi_offset 3, -20
 2902              		.cfi_offset 2, -24
 2903              		.cfi_offset 1, -28
 2904              		.cfi_offset 0, -32
 2905              	.LCFI3:
 2906              		.cfi_def_cfa 11, 4
  64:../main.c     **** 	//COMPLETAR: tomar el código de avance de posición del led rotante de la práctica anterior
  65:../main.c     **** //	if (RL.moving) {
  66:../main.c     **** 		//if(RL.iter == 0) {
  67:../main.c     **** 			if(RL.direction==0){
 2907              		.loc 1 67 0
 2908 0108 F0309FE5 		ldr	r3, .L12
 2909 010c 083093E5 		ldr	r3, [r3, #8]
 2910 0110 000053E3 		cmp	r3, #0
 2911 0114 1200001A 		bne	.L7
  68:../main.c     **** 				if(RL.position == 5){
 2912              		.loc 1 68 0
 2913 0118 E0309FE5 		ldr	r3, .L12
 2914 011c 0C3093E5 		ldr	r3, [r3, #12]
 2915 0120 050053E3 		cmp	r3, #5
 2916 0124 0800001A 		bne	.L8
  69:../main.c     **** 					two--;
 2917              		.loc 1 69 0
 2918 0128 D4309FE5 		ldr	r3, .L12+4
 2919 012c 003093E5 		ldr	r3, [r3, #0]
 2920 0130 012043E2 		sub	r2, r3, #1
 2921 0134 C8309FE5 		ldr	r3, .L12+4
 2922 0138 002083E5 		str	r2, [r3, #0]
  70:../main.c     **** 					RL.position = 0;}
 2923              		.loc 1 70 0
 2924 013c BC309FE5 		ldr	r3, .L12
 2925 0140 0020A0E3 		mov	r2, #0
 2926 0144 0C2083E5 		str	r2, [r3, #12]
 2927 0148 120000EA 		b	.L9
 2928              	.L8:
  71:../main.c     **** 				else
  72:../main.c     **** 					RL.position++;
 2929              		.loc 1 72 0
 2930 014c AC309FE5 		ldr	r3, .L12
 2931 0150 0C3093E5 		ldr	r3, [r3, #12]
 2932 0154 012083E2 		add	r2, r3, #1
 2933 0158 A0309FE5 		ldr	r3, .L12
 2934 015c 0C2083E5 		str	r2, [r3, #12]
 2935 0160 0C0000EA 		b	.L9
 2936              	.L7:
  73:../main.c     **** 			}
  74:../main.c     **** 			else{
  75:../main.c     **** 				if(RL.position == 0){
 2937              		.loc 1 75 0
 2938 0164 94309FE5 		ldr	r3, .L12
 2939 0168 0C3093E5 		ldr	r3, [r3, #12]
 2940 016c 000053E3 		cmp	r3, #0
 2941 0170 0300001A 		bne	.L10
  76:../main.c     **** 					RL.position = 5;
 2942              		.loc 1 76 0
 2943 0174 84309FE5 		ldr	r3, .L12
 2944 0178 0520A0E3 		mov	r2, #5
 2945 017c 0C2083E5 		str	r2, [r3, #12]
 2946 0180 040000EA 		b	.L9
 2947              	.L10:
  77:../main.c     **** 
  78:../main.c     **** 				}
  79:../main.c     **** 				else
  80:../main.c     **** 					RL.position--;
 2948              		.loc 1 80 0
 2949 0184 74309FE5 		ldr	r3, .L12
 2950 0188 0C3093E5 		ldr	r3, [r3, #12]
 2951 018c 012043E2 		sub	r2, r3, #1
 2952 0190 68309FE5 		ldr	r3, .L12
 2953 0194 0C2083E5 		str	r2, [r3, #12]
 2954              	.L9:
  81:../main.c     **** 			}
  82:../main.c     **** 			D8Led_segment(RL.position);
 2955              		.loc 1 82 0
 2956 0198 60309FE5 		ldr	r3, .L12
 2957 019c 0C3093E5 		ldr	r3, [r3, #12]
 2958 01a0 0300A0E1 		mov	r0, r3
 2959 01a4 FEFFFFEB 		bl	D8Led_segment
  83:../main.c     **** 
  84:../main.c     **** 		//	RL.iter = RL.speed;
  85:../main.c     **** 		//}
  86:../main.c     **** 		//else RL.iter--;
  87:../main.c     **** //	}
  88:../main.c     **** 
  89:../main.c     **** 	D8Led_segment(RL.position);
 2960              		.loc 1 89 0
 2961 01a8 50309FE5 		ldr	r3, .L12
 2962 01ac 0C3093E5 		ldr	r3, [r3, #12]
 2963 01b0 0300A0E1 		mov	r0, r3
 2964 01b4 FEFFFFEB 		bl	D8Led_segment
  90:../main.c     **** 	if(two == 0){
 2965              		.loc 1 90 0
 2966 01b8 44309FE5 		ldr	r3, .L12+4
 2967 01bc 003093E5 		ldr	r3, [r3, #0]
 2968 01c0 000053E3 		cmp	r3, #0
 2969 01c4 0700001A 		bne	.L11
  91:../main.c     **** 		RL.moving = 0;
 2970              		.loc 1 91 0
 2971 01c8 30309FE5 		ldr	r3, .L12
 2972 01cc 0020A0E3 		mov	r2, #0
 2973 01d0 002083E5 		str	r2, [r3, #0]
  92:../main.c     **** 		tmr_stop(TIMER1);
 2974              		.loc 1 92 0
 2975 01d4 0100A0E3 		mov	r0, #1
 2976 01d8 FEFFFFEB 		bl	tmr_stop
  93:../main.c     **** 		ocupado = 0;
 2977              		.loc 1 93 0
 2978 01dc 24309FE5 		ldr	r3, .L12+8
 2979 01e0 0020A0E3 		mov	r2, #0
 2980 01e4 002083E5 		str	r2, [r3, #0]
 2981              	.L11:
  94:../main.c     **** 
  95:../main.c     **** 	}
  96:../main.c     **** 	ic_cleanflag(INT_TIMER1);
 2982              		.loc 1 96 0
 2983 01e8 0C00A0E3 		mov	r0, #12
 2984 01ec FEFFFFEB 		bl	ic_cleanflag
  97:../main.c     **** 
  98:../main.c     **** }
 2985              		.loc 1 98 0
 2986 01f0 1CD04BE2 		sub	sp, fp, #28
 2987 01f4 0F689DE8 		ldmfd	sp, {r0, r1, r2, r3, fp, sp, lr}
 2988 01f8 04C09DE4 		ldmfd	sp!, {ip}
 2989 01fc 04F05EE2 		subs	pc, lr, #4
 2990              	.L13:
 2991              		.align	2
 2992              	.L12:
 2993 0200 00000000 		.word	RL
 2994 0204 00000000 		.word	two
 2995 0208 00000000 		.word	ocupado
 2996              		.cfi_endproc
 2997              	.LFE1:
 2999              		.align	2
 3000              		.global	button_ISR
 3002              	button_ISR:
 3003              	.LFB2:
  99:../main.c     **** 
 100:../main.c     **** void button_ISR(void)
 101:../main.c     **** {
 3004              		.loc 1 101 0
 3005              		.cfi_startproc
 3006              		@ Interrupt Service Routine.
 3007              		@ args = 0, pretend = 0, frame = 8
 3008              		@ frame_needed = 1, uses_anonymous_args = 0
 3009 020c 04C02DE5 		str	ip, [sp, #-4]!
 3010 0210 0DC0A0E1 		mov	ip, sp
 3011              	.LCFI4:
 3012              		.cfi_def_cfa_register 12
 3013 0214 0FD82DE9 		stmfd	sp!, {r0, r1, r2, r3, fp, ip, lr, pc}
 3014 0218 04B04CE2 		sub	fp, ip, #4
 3015              		.cfi_offset 14, -8
 3016              		.cfi_offset 13, -12
 3017              		.cfi_offset 11, -16
 3018              		.cfi_offset 3, -20
 3019              		.cfi_offset 2, -24
 3020              		.cfi_offset 1, -28
 3021              		.cfi_offset 0, -32
 3022              	.LCFI5:
 3023              		.cfi_def_cfa 11, 4
 3024 021c 08D04DE2 		sub	sp, sp, #8
 102:../main.c     **** 	unsigned int whicheint = rEXTINTPND;
 3025              		.loc 1 102 0
 3026 0220 7C319FE5 		ldr	r3, .L20
 3027 0224 003093E5 		ldr	r3, [r3, #0]
 3028 0228 20300BE5 		str	r3, [fp, #-32]
 103:../main.c     **** 	unsigned int buttons = (whicheint >> 2) & 0x3;
 3029              		.loc 1 103 0
 3030 022c 20301BE5 		ldr	r3, [fp, #-32]
 3031 0230 2331A0E1 		mov	r3, r3, lsr #2
 3032 0234 033003E2 		and	r3, r3, #3
 3033 0238 24300BE5 		str	r3, [fp, #-36]
 104:../main.c     **** 
 105:../main.c     **** 	//COMPLETAR: usar el código de la primera parte parte de atención a los
 106:../main.c     **** 	//pulsadores
 107:../main.c     **** 	if (buttons & BUT1) {
 3034              		.loc 1 107 0
 3035 023c 24301BE5 		ldr	r3, [fp, #-36]
 3036 0240 013003E2 		and	r3, r3, #1
 3037 0244 FF3003E2 		and	r3, r3, #255
 3038 0248 000053E3 		cmp	r3, #0
 3039 024c 2700000A 		beq	.L15
 108:../main.c     **** 		if (ocupado == 0){
 3040              		.loc 1 108 0
 3041 0250 50319FE5 		ldr	r3, .L20+4
 3042 0254 003093E5 		ldr	r3, [r3, #0]
 3043 0258 000053E3 		cmp	r3, #0
 3044 025c 2300001A 		bne	.L15
 109:../main.c     **** 			ocupado = 1;
 3045              		.loc 1 109 0
 3046 0260 40319FE5 		ldr	r3, .L20+4
 3047 0264 0120A0E3 		mov	r2, #1
 3048 0268 002083E5 		str	r2, [r3, #0]
 110:../main.c     **** 			if(cont2 == 0){
 3049              		.loc 1 110 0
 3050 026c 38319FE5 		ldr	r3, .L20+8
 3051 0270 003093E5 		ldr	r3, [r3, #0]
 3052 0274 000053E3 		cmp	r3, #0
 3053 0278 0E00001A 		bne	.L16
 111:../main.c     **** 			cont2 = 1;
 3054              		.loc 1 111 0
 3055 027c 28319FE5 		ldr	r3, .L20+8
 3056 0280 0120A0E3 		mov	r2, #1
 3057 0284 002083E5 		str	r2, [r3, #0]
 112:../main.c     **** 			two = 2;
 3058              		.loc 1 112 0
 3059 0288 20319FE5 		ldr	r3, .L20+12
 3060 028c 0220A0E3 		mov	r2, #2
 3061 0290 002083E5 		str	r2, [r3, #0]
 113:../main.c     **** 			mode = 1;
 3062              		.loc 1 113 0
 3063 0294 18319FE5 		ldr	r3, .L20+16
 3064 0298 0120A0E3 		mov	r2, #1
 3065 029c 002083E5 		str	r2, [r3, #0]
 114:../main.c     **** 			RL.moving = 1;
 3066              		.loc 1 114 0
 3067 02a0 10319FE5 		ldr	r3, .L20+20
 3068 02a4 0120A0E3 		mov	r2, #1
 3069 02a8 002083E5 		str	r2, [r3, #0]
 115:../main.c     **** 			tmr_start(TIMER1);
 3070              		.loc 1 115 0
 3071 02ac 0100A0E3 		mov	r0, #1
 3072 02b0 FEFFFFEB 		bl	tmr_start
 3073 02b4 0D0000EA 		b	.L15
 3074              	.L16:
 116:../main.c     **** 
 117:../main.c     **** 			}
 118:../main.c     **** 		else{
 119:../main.c     **** 			ocupado = 1;
 3075              		.loc 1 119 0
 3076 02b8 E8309FE5 		ldr	r3, .L20+4
 3077 02bc 0120A0E3 		mov	r2, #1
 3078 02c0 002083E5 		str	r2, [r3, #0]
 120:../main.c     **** 			cont2 = 0;
 3079              		.loc 1 120 0
 3080 02c4 E0309FE5 		ldr	r3, .L20+8
 3081 02c8 0020A0E3 		mov	r2, #0
 3082 02cc 002083E5 		str	r2, [r3, #0]
 121:../main.c     **** 			cont = 12;
 3083              		.loc 1 121 0
 3084 02d0 E4309FE5 		ldr	r3, .L20+24
 3085 02d4 0C20A0E3 		mov	r2, #12
 3086 02d8 002083E5 		str	r2, [r3, #0]
 122:../main.c     **** 			mode = 0;
 3087              		.loc 1 122 0
 3088 02dc D0309FE5 		ldr	r3, .L20+16
 3089 02e0 0020A0E3 		mov	r2, #0
 3090 02e4 002083E5 		str	r2, [r3, #0]
 123:../main.c     **** 			tmr_start(TIMER0);
 3091              		.loc 1 123 0
 3092 02e8 0000A0E3 		mov	r0, #0
 3093 02ec FEFFFFEB 		bl	tmr_start
 3094              	.L15:
 124:../main.c     **** 
 125:../main.c     **** 		}
 126:../main.c     **** 		}
 127:../main.c     **** 	}
 128:../main.c     **** 	if (buttons & BUT2) {
 3095              		.loc 1 128 0
 3096 02f0 24301BE5 		ldr	r3, [fp, #-36]
 3097 02f4 023003E2 		and	r3, r3, #2
 3098 02f8 000053E3 		cmp	r3, #0
 3099 02fc 0B00000A 		beq	.L17
 129:../main.c     **** 		if (ocupado == 0){
 3100              		.loc 1 129 0
 3101 0300 A0309FE5 		ldr	r3, .L20+4
 3102 0304 003093E5 		ldr	r3, [r3, #0]
 3103 0308 000053E3 		cmp	r3, #0
 3104 030c 0700001A 		bne	.L17
 130:../main.c     **** 			ocupado = 1;
 3105              		.loc 1 130 0
 3106 0310 90309FE5 		ldr	r3, .L20+4
 3107 0314 0120A0E3 		mov	r2, #1
 3108 0318 002083E5 		str	r2, [r3, #0]
 131:../main.c     **** 			cont = 0;
 3109              		.loc 1 131 0
 3110 031c 98309FE5 		ldr	r3, .L20+24
 3111 0320 0020A0E3 		mov	r2, #0
 3112 0324 002083E5 		str	r2, [r3, #0]
 132:../main.c     **** 			tmr_start(TIMER0);
 3113              		.loc 1 132 0
 3114 0328 0000A0E3 		mov	r0, #0
 3115 032c FEFFFFEB 		bl	tmr_start
 3116              	.L17:
 133:../main.c     **** 		}
 134:../main.c     **** 						/*if (RL.moving){
 135:../main.c     **** 				RL.moving = 0;
 136:../main.c     **** 				tmr_stop(TIMER0);
 137:../main.c     **** 			}
 138:../main.c     **** 			else {
 139:../main.c     **** 				RL.moving = 1;
 140:../main.c     **** 				tmr_update(TIMER0);
 141:../main.c     **** 				tmr_start(TIMER0);
 142:../main.c     **** 			}*/
 143:../main.c     **** 		}
 144:../main.c     **** 	// eliminamos rebotes
 145:../main.c     **** 	Delay(2000);
 3117              		.loc 1 145 0
 3118 0330 7D0EA0E3 		mov	r0, #2000
 3119 0334 FEFFFFEB 		bl	Delay
 146:../main.c     **** 	// borramos el flag en extintpnd
 147:../main.c     **** 	//rEXTINTPND = //COMPLETAR: debemos borrar las peticiones de interrupción en
 148:../main.c     **** 		         //EXTINTPND escribiendo un 1 en los flags que queremos borrar (los
 149:../main.c     **** 				 //correspondientes a los pulsadores pulsados)
 150:../main.c     **** 	if (rEXTINTPND & 0x4){
 3120              		.loc 1 150 0
 3121 0338 64309FE5 		ldr	r3, .L20
 3122 033c 003093E5 		ldr	r3, [r3, #0]
 3123 0340 043003E2 		and	r3, r3, #4
 3124 0344 000053E3 		cmp	r3, #0
 3125 0348 0500000A 		beq	.L18
 151:../main.c     **** 			rEXTINTPND |= (0x1 << 2);
 3126              		.loc 1 151 0
 3127 034c 50309FE5 		ldr	r3, .L20
 3128 0350 4C209FE5 		ldr	r2, .L20
 3129 0354 002092E5 		ldr	r2, [r2, #0]
 3130 0358 042082E3 		orr	r2, r2, #4
 3131 035c 002083E5 		str	r2, [r3, #0]
 3132 0360 090000EA 		b	.L19
 3133              	.L18:
 152:../main.c     **** 		}
 153:../main.c     **** 		else if(rEXTINTPND & 0x8){
 3134              		.loc 1 153 0
 3135 0364 38309FE5 		ldr	r3, .L20
 3136 0368 003093E5 		ldr	r3, [r3, #0]
 3137 036c 083003E2 		and	r3, r3, #8
 3138 0370 000053E3 		cmp	r3, #0
 3139 0374 0400000A 		beq	.L19
 154:../main.c     **** 			rEXTINTPND |= (0x1 << 3);
 3140              		.loc 1 154 0
 3141 0378 24309FE5 		ldr	r3, .L20
 3142 037c 20209FE5 		ldr	r2, .L20
 3143 0380 002092E5 		ldr	r2, [r2, #0]
 3144 0384 082082E3 		orr	r2, r2, #8
 3145 0388 002083E5 		str	r2, [r3, #0]
 3146              	.L19:
 155:../main.c     **** 		}
 156:../main.c     **** 		ic_cleanflag(INT_EINT4567);
 3147              		.loc 1 156 0
 3148 038c 1500A0E3 		mov	r0, #21
 3149 0390 FEFFFFEB 		bl	ic_cleanflag
 157:../main.c     **** 	//Borrar el flag de interrupción en el controlador de interrupciones
 158:../main.c     **** }
 3150              		.loc 1 158 0
 3151 0394 1CD04BE2 		sub	sp, fp, #28
 3152 0398 0F689DE8 		ldmfd	sp, {r0, r1, r2, r3, fp, sp, lr}
 3153 039c 04C09DE4 		ldmfd	sp!, {ip}
 3154 03a0 04F05EE2 		subs	pc, lr, #4
 3155              	.L21:
 3156              		.align	2
 3157              	.L20:
 3158 03a4 5400D201 		.word	30539860
 3159 03a8 00000000 		.word	ocupado
 3160 03ac 00000000 		.word	cont2
 3161 03b0 00000000 		.word	two
 3162 03b4 00000000 		.word	mode
 3163 03b8 00000000 		.word	RL
 3164 03bc 00000000 		.word	cont
 3165              		.cfi_endproc
 3166              	.LFE2:
 3168              		.align	2
 3169              		.global	keyboard_ISR
 3171              	keyboard_ISR:
 3172              	.LFB3:
 159:../main.c     **** 
 160:../main.c     **** void keyboard_ISR(void)
 161:../main.c     **** {
 3173              		.loc 1 161 0
 3174              		.cfi_startproc
 3175              		@ Interrupt Service Routine.
 3176              		@ args = 0, pretend = 0, frame = 8
 3177              		@ frame_needed = 1, uses_anonymous_args = 0
 3178 03c0 04C02DE5 		str	ip, [sp, #-4]!
 3179 03c4 0DC0A0E1 		mov	ip, sp
 3180              	.LCFI6:
 3181              		.cfi_def_cfa_register 12
 3182 03c8 0FD82DE9 		stmfd	sp!, {r0, r1, r2, r3, fp, ip, lr, pc}
 3183 03cc 04B04CE2 		sub	fp, ip, #4
 3184              		.cfi_offset 14, -8
 3185              		.cfi_offset 13, -12
 3186              		.cfi_offset 11, -16
 3187              		.cfi_offset 3, -20
 3188              		.cfi_offset 2, -24
 3189              		.cfi_offset 1, -28
 3190              		.cfi_offset 0, -32
 3191              	.LCFI7:
 3192              		.cfi_def_cfa 11, 4
 3193 03d0 08D04DE2 		sub	sp, sp, #8
 162:../main.c     **** 	int key;
 163:../main.c     **** 
 164:../main.c     **** 	/* Eliminar rebotes de presión */
 165:../main.c     **** 	Delay(200);
 3194              		.loc 1 165 0
 3195 03d4 C800A0E3 		mov	r0, #200
 3196 03d8 FEFFFFEB 		bl	Delay
 166:../main.c     **** 
 167:../main.c     **** 	/* Escaneo de tecla */
 168:../main.c     **** 	key = kb_scan();
 3197              		.loc 1 168 0
 3198 03dc FEFFFFEB 		bl	kb_scan
 3199 03e0 20000BE5 		str	r0, [fp, #-32]
 169:../main.c     **** 
 170:../main.c     **** 	if (key != -1) {
 3200              		.loc 1 170 0
 3201 03e4 20301BE5 		ldr	r3, [fp, #-32]
 3202 03e8 010073E3 		cmn	r3, #1
 3203 03ec 2F00000A 		beq	.L23
 171:../main.c     **** 		/* Visualizacion en el display */
 172:../main.c     **** 		//COMPLETAR: mostrar la tecla en el display utilizando el interfaz
 173:../main.c     **** 		//definido en D8Led.h
 174:../main.c     **** 		D8Led_digit(key);
 3204              		.loc 1 174 0
 3205 03f0 20001BE5 		ldr	r0, [fp, #-32]
 3206 03f4 FEFFFFEB 		bl	D8Led_digit
 175:../main.c     **** 
 176:../main.c     **** 		switch (key) {
 3207              		.loc 1 176 0
 3208 03f8 20301BE5 		ldr	r3, [fp, #-32]
 3209 03fc 030053E3 		cmp	r3, #3
 3210 0400 03F19F97 		ldrls	pc, [pc, r3, asl #2]
 3211 0404 230000EA 		b	.L24
 3212              	.L29:
 3213 0408 18040000 		.word	.L25
 3214 040c 38040000 		.word	.L26
 3215 0410 58040000 		.word	.L27
 3216 0414 78040000 		.word	.L28
 3217              	.L25:
 177:../main.c     **** 			case 0:
 178:../main.c     **** 				//COMPLETAR: poner en timer0 divisor 1/8 y contador 62500
 179:../main.c     **** 				tmr_set_divider(TIMER0, D1_8);
 3218              		.loc 1 179 0
 3219 0418 0000A0E3 		mov	r0, #0
 3220 041c 0210A0E3 		mov	r1, #2
 3221 0420 FEFFFFEB 		bl	tmr_set_divider
 180:../main.c     **** 				tmr_set_count(TIMER0, 62500,62495);
 3222              		.loc 1 180 0
 3223 0424 0000A0E3 		mov	r0, #0
 3224 0428 A0109FE5 		ldr	r1, .L32
 3225 042c A0209FE5 		ldr	r2, .L32+4
 3226 0430 FEFFFFEB 		bl	tmr_set_count
 181:../main.c     **** 				break;
 3227              		.loc 1 181 0
 3228 0434 180000EA 		b	.L30
 3229              	.L26:
 182:../main.c     **** 			case 1:
 183:../main.c     **** 				//COMPLETAR: poner en timer0 timer divisor 1/8 y contador 31250
 184:../main.c     **** 				tmr_set_divider(TIMER0, D1_8);
 3230              		.loc 1 184 0
 3231 0438 0000A0E3 		mov	r0, #0
 3232 043c 0210A0E3 		mov	r1, #2
 3233 0440 FEFFFFEB 		bl	tmr_set_divider
 185:../main.c     **** 				tmr_set_count(TIMER0, 31250,31245);
 3234              		.loc 1 185 0
 3235 0444 0000A0E3 		mov	r0, #0
 3236 0448 88109FE5 		ldr	r1, .L32+8
 3237 044c 88209FE5 		ldr	r2, .L32+12
 3238 0450 FEFFFFEB 		bl	tmr_set_count
 186:../main.c     **** 				break;
 3239              		.loc 1 186 0
 3240 0454 100000EA 		b	.L30
 3241              	.L27:
 187:../main.c     **** 			case 2:
 188:../main.c     **** 				//COMPLETAR: poner en timer0 timer divisor 1/8 y contador 15625
 189:../main.c     **** 				tmr_set_divider(TIMER0, D1_8);
 3242              		.loc 1 189 0
 3243 0458 0000A0E3 		mov	r0, #0
 3244 045c 0210A0E3 		mov	r1, #2
 3245 0460 FEFFFFEB 		bl	tmr_set_divider
 190:../main.c     **** 				tmr_set_count(TIMER0, 15625,15620);
 3246              		.loc 1 190 0
 3247 0464 0000A0E3 		mov	r0, #0
 3248 0468 70109FE5 		ldr	r1, .L32+16
 3249 046c 70209FE5 		ldr	r2, .L32+20
 3250 0470 FEFFFFEB 		bl	tmr_set_count
 191:../main.c     **** 				break;
 3251              		.loc 1 191 0
 3252 0474 080000EA 		b	.L30
 3253              	.L28:
 192:../main.c     **** 			case 3:
 193:../main.c     **** 				tmr_set_divider(TIMER0, D1_4);
 3254              		.loc 1 193 0
 3255 0478 0000A0E3 		mov	r0, #0
 3256 047c 0110A0E3 		mov	r1, #1
 3257 0480 FEFFFFEB 		bl	tmr_set_divider
 194:../main.c     **** 				tmr_set_count(TIMER0, 15625,15620);
 3258              		.loc 1 194 0
 3259 0484 0000A0E3 		mov	r0, #0
 3260 0488 50109FE5 		ldr	r1, .L32+16
 3261 048c 50209FE5 		ldr	r2, .L32+20
 3262 0490 FEFFFFEB 		bl	tmr_set_count
 195:../main.c     **** 				//COMPLETAR: poner en timer0 timer divisor 1/4 y contador 15625
 196:../main.c     **** 				break;
 3263              		.loc 1 196 0
 3264 0494 000000EA 		b	.L30
 3265              	.L24:
 197:../main.c     **** 			default:
 198:../main.c     **** 				break;
 3266              		.loc 1 198 0
 3267 0498 0000A0E1 		mov	r0, r0	@ nop
 3268              	.L30:
 199:../main.c     **** 		}
 200:../main.c     **** 
 201:../main.c     **** 		/* Esperar a que la tecla se suelte, consultando el registro de datos */
 202:../main.c     **** 		//while (/*COMPLETAR: true si está pulsada la tecla (leer del registro rPDATG)*/);
 203:../main.c     **** 		while(rPDATG == ENABLE);
 3269              		.loc 1 203 0
 3270 049c 0000A0E1 		mov	r0, r0	@ nop
 3271              	.L31:
 3272              		.loc 1 203 0 is_stmt 0 discriminator 1
 3273 04a0 40309FE5 		ldr	r3, .L32+24
 3274 04a4 003093E5 		ldr	r3, [r3, #0]
 3275 04a8 010053E3 		cmp	r3, #1
 3276 04ac FBFFFF0A 		beq	.L31
 3277              	.L23:
 204:../main.c     **** 	}
 205:../main.c     **** 
 206:../main.c     ****     /* Eliminar rebotes de depresión */
 207:../main.c     ****     Delay(200);
 3278              		.loc 1 207 0 is_stmt 1
 3279 04b0 C800A0E3 		mov	r0, #200
 3280 04b4 FEFFFFEB 		bl	Delay
 208:../main.c     **** 
 209:../main.c     ****     /* Borrar interrupciones pendientes */
 210:../main.c     **** 	//COMPLETAR
 211:../main.c     **** 	//borrar la interrupción por la línea EINT1 en el registro rI_ISPC
 212:../main.c     ****     ic_cleanflag(INT_EINT1);
 3281              		.loc 1 212 0
 3282 04b8 1800A0E3 		mov	r0, #24
 3283 04bc FEFFFFEB 		bl	ic_cleanflag
 213:../main.c     **** }
 3284              		.loc 1 213 0
 3285 04c0 1CD04BE2 		sub	sp, fp, #28
 3286 04c4 0F689DE8 		ldmfd	sp, {r0, r1, r2, r3, fp, sp, lr}
 3287 04c8 04C09DE4 		ldmfd	sp!, {ip}
 3288 04cc 04F05EE2 		subs	pc, lr, #4
 3289              	.L33:
 3290              		.align	2
 3291              	.L32:
 3292 04d0 24F40000 		.word	62500
 3293 04d4 1FF40000 		.word	62495
 3294 04d8 127A0000 		.word	31250
 3295 04dc 0D7A0000 		.word	31245
 3296 04e0 093D0000 		.word	15625
 3297 04e4 043D0000 		.word	15620
 3298 04e8 4400D201 		.word	30539844
 3299              		.cfi_endproc
 3300              	.LFE3:
 3302              		.align	2
 3303              		.global	setup
 3305              	setup:
 3306              	.LFB4:
 214:../main.c     **** 
 215:../main.c     **** int setup(void)
 216:../main.c     **** {
 3307              		.loc 1 216 0
 3308              		.cfi_startproc
 3309              		@ Function supports interworking.
 3310              		@ args = 0, pretend = 0, frame = 0
 3311              		@ frame_needed = 1, uses_anonymous_args = 0
 3312 04ec 0DC0A0E1 		mov	ip, sp
 3313              	.LCFI8:
 3314              		.cfi_def_cfa_register 12
 3315 04f0 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3316 04f4 04B04CE2 		sub	fp, ip, #4
 3317              		.cfi_offset 14, -8
 3318              		.cfi_offset 13, -12
 3319              		.cfi_offset 11, -16
 3320              	.LCFI9:
 3321              		.cfi_def_cfa 11, 4
 217:../main.c     **** 	leds_init();
 3322              		.loc 1 217 0
 3323 04f8 FEFFFFEB 		bl	leds_init
 218:../main.c     **** 	D8Led_init();
 3324              		.loc 1 218 0
 3325 04fc FEFFFFEB 		bl	D8Led_init
 219:../main.c     **** 	D8Led_segment(RL.position);
 3326              		.loc 1 219 0
 3327 0500 B0319FE5 		ldr	r3, .L35
 3328 0504 0C3093E5 		ldr	r3, [r3, #12]
 3329 0508 0300A0E1 		mov	r0, r3
 3330 050c FEFFFFEB 		bl	D8Led_segment
 220:../main.c     **** 
 221:../main.c     **** 	/* Port G: configuración para generación de interrupciones externas,
 222:../main.c     **** 	 *         botones y teclado
 223:../main.c     **** 	 **/
 224:../main.c     **** 
 225:../main.c     **** 	//COMPLETAR: utilizando el interfaz para el puerto G definido en gpio.h
 226:../main.c     **** 	//configurar los pines 1, 6 y 7 del puerto G para poder generar interrupciones
 227:../main.c     **** 	//externas por flanco de bajada por ellos y activar las correspondientes
 228:../main.c     **** 	//resistencias de pull-up.
 229:../main.c     **** 		portG_conf(1, EINT);
 3331              		.loc 1 229 0
 3332 0510 0100A0E3 		mov	r0, #1
 3333 0514 0310A0E3 		mov	r1, #3
 3334 0518 FEFFFFEB 		bl	portG_conf
 230:../main.c     **** 		portG_conf(6, EINT);
 3335              		.loc 1 230 0
 3336 051c 0600A0E3 		mov	r0, #6
 3337 0520 0310A0E3 		mov	r1, #3
 3338 0524 FEFFFFEB 		bl	portG_conf
 231:../main.c     **** 		portG_conf(7, EINT);
 3339              		.loc 1 231 0
 3340 0528 0700A0E3 		mov	r0, #7
 3341 052c 0310A0E3 		mov	r1, #3
 3342 0530 FEFFFFEB 		bl	portG_conf
 232:../main.c     **** 		portG_eint_trig(1, FALLING);
 3343              		.loc 1 232 0
 3344 0534 0100A0E3 		mov	r0, #1
 3345 0538 0210A0E3 		mov	r1, #2
 3346 053c FEFFFFEB 		bl	portG_eint_trig
 233:../main.c     **** 		portG_eint_trig(6, FALLING);
 3347              		.loc 1 233 0
 3348 0540 0600A0E3 		mov	r0, #6
 3349 0544 0210A0E3 		mov	r1, #2
 3350 0548 FEFFFFEB 		bl	portG_eint_trig
 234:../main.c     **** 		portG_eint_trig(7, FALLING);
 3351              		.loc 1 234 0
 3352 054c 0700A0E3 		mov	r0, #7
 3353 0550 0210A0E3 		mov	r1, #2
 3354 0554 FEFFFFEB 		bl	portG_eint_trig
 235:../main.c     **** 		portG_conf_pup(1, ENABLE);
 3355              		.loc 1 235 0
 3356 0558 0100A0E3 		mov	r0, #1
 3357 055c 0110A0E3 		mov	r1, #1
 3358 0560 FEFFFFEB 		bl	portG_conf_pup
 236:../main.c     **** 		portG_conf_pup(6, ENABLE);
 3359              		.loc 1 236 0
 3360 0564 0600A0E3 		mov	r0, #6
 3361 0568 0110A0E3 		mov	r1, #1
 3362 056c FEFFFFEB 		bl	portG_conf_pup
 237:../main.c     **** 		portG_conf_pup(7, ENABLE);
 3363              		.loc 1 237 0
 3364 0570 0700A0E3 		mov	r0, #7
 3365 0574 0110A0E3 		mov	r1, #1
 3366 0578 FEFFFFEB 		bl	portG_conf_pup
 238:../main.c     **** 
 239:../main.c     **** 	/********************************************************************/
 240:../main.c     **** 
 241:../main.c     **** 	/* Configuración del timer */
 242:../main.c     **** 	cont = 0;
 3367              		.loc 1 242 0
 3368 057c 38319FE5 		ldr	r3, .L35+4
 3369 0580 0020A0E3 		mov	r2, #0
 3370 0584 002083E5 		str	r2, [r3, #0]
 243:../main.c     **** 	ocupado = 0;
 3371              		.loc 1 243 0
 3372 0588 30319FE5 		ldr	r3, .L35+8
 3373 058c 0020A0E3 		mov	r2, #0
 3374 0590 002083E5 		str	r2, [r3, #0]
 244:../main.c     **** 	cont2 = 0;
 3375              		.loc 1 244 0
 3376 0594 28319FE5 		ldr	r3, .L35+12
 3377 0598 0020A0E3 		mov	r2, #0
 3378 059c 002083E5 		str	r2, [r3, #0]
 245:../main.c     **** 	//Quedas configurado
 246:../main.c     **** 	tmr_set_prescaler(0,255);
 3379              		.loc 1 246 0
 3380 05a0 0000A0E3 		mov	r0, #0
 3381 05a4 FF10A0E3 		mov	r1, #255
 3382 05a8 FEFFFFEB 		bl	tmr_set_prescaler
 247:../main.c     **** 	tmr_set_divider(0,D1_8);
 3383              		.loc 1 247 0
 3384 05ac 0000A0E3 		mov	r0, #0
 3385 05b0 0210A0E3 		mov	r1, #2
 3386 05b4 FEFFFFEB 		bl	tmr_set_divider
 248:../main.c     **** 	tmr_set_count(TIMER0,62500,62495);
 3387              		.loc 1 248 0
 3388 05b8 0000A0E3 		mov	r0, #0
 3389 05bc 04119FE5 		ldr	r1, .L35+16
 3390 05c0 04219FE5 		ldr	r2, .L35+20
 3391 05c4 FEFFFFEB 		bl	tmr_set_count
 249:../main.c     **** 	tmr_update(TIMER0);
 3392              		.loc 1 249 0
 3393 05c8 0000A0E3 		mov	r0, #0
 3394 05cc FEFFFFEB 		bl	tmr_update
 250:../main.c     **** 	tmr_set_mode(0,RELOAD);
 3395              		.loc 1 250 0
 3396 05d0 0000A0E3 		mov	r0, #0
 3397 05d4 0110A0E3 		mov	r1, #1
 3398 05d8 FEFFFFEB 		bl	tmr_set_mode
 251:../main.c     **** 	tmr_stop(TIMER0);
 3399              		.loc 1 251 0
 3400 05dc 0000A0E3 		mov	r0, #0
 3401 05e0 FEFFFFEB 		bl	tmr_stop
 252:../main.c     **** 
 253:../main.c     **** 	tmr_set_count(TIMER1,62500,62495);
 3402              		.loc 1 253 0
 3403 05e4 0100A0E3 		mov	r0, #1
 3404 05e8 D8109FE5 		ldr	r1, .L35+16
 3405 05ec D8209FE5 		ldr	r2, .L35+20
 3406 05f0 FEFFFFEB 		bl	tmr_set_count
 254:../main.c     **** 	tmr_update(TIMER1);
 3407              		.loc 1 254 0
 3408 05f4 0100A0E3 		mov	r0, #1
 3409 05f8 FEFFFFEB 		bl	tmr_update
 255:../main.c     **** 	tmr_set_mode(1,RELOAD);
 3410              		.loc 1 255 0
 3411 05fc 0100A0E3 		mov	r0, #1
 3412 0600 0110A0E3 		mov	r1, #1
 3413 0604 FEFFFFEB 		bl	tmr_set_mode
 256:../main.c     **** 	tmr_stop(TIMER1);
 3414              		.loc 1 256 0
 3415 0608 0100A0E3 		mov	r0, #1
 3416 060c FEFFFFEB 		bl	tmr_stop
 257:../main.c     **** 
 258:../main.c     **** 
 259:../main.c     **** 
 260:../main.c     **** 	//COMPLETAR: tomar el código de la segunda parte
 261:../main.c     **** 
 262:../main.c     **** 
 263:../main.c     **** 	/***************************/
 264:../main.c     **** 
 265:../main.c     **** 	// Registramos las ISRs
 266:../main.c     **** 	//pISR_TIMER0   = //COMPLETAR: registrar la RTI del timer
 267:../main.c     **** 	pISR_TIMER0 = (unsigned) timer_ISR;
 3417              		.loc 1 267 0
 3418 0610 B8309FE5 		ldr	r3, .L35+24
 3419 0614 B8209FE5 		ldr	r2, .L35+28
 3420 0618 002083E5 		str	r2, [r3, #0]
 268:../main.c     **** 	pISR_TIMER1 = (unsigned) timer1_ISR;
 3421              		.loc 1 268 0
 3422 061c B4309FE5 		ldr	r3, .L35+32
 3423 0620 B4209FE5 		ldr	r2, .L35+36
 3424 0624 002083E5 		str	r2, [r3, #0]
 269:../main.c     **** 	pISR_EINT4567 = (unsigned) button_ISR;
 3425              		.loc 1 269 0
 3426 0628 B0309FE5 		ldr	r3, .L35+40
 3427 062c B0209FE5 		ldr	r2, .L35+44
 3428 0630 002083E5 		str	r2, [r3, #0]
 270:../main.c     **** 	pISR_EINT1 = (unsigned) keyboard_ISR;
 3429              		.loc 1 270 0
 3430 0634 AC309FE5 		ldr	r3, .L35+48
 3431 0638 AC209FE5 		ldr	r2, .L35+52
 3432 063c 002083E5 		str	r2, [r3, #0]
 271:../main.c     **** 
 272:../main.c     **** 	//pISR_EINT4567 = //COMPLETAR: registrar la RTI de los botones
 273:../main.c     **** 	//pISR_EINT1    = //COMPLETAR: registrar la RTI del teclado
 274:../main.c     **** 
 275:../main.c     **** 	ic_init();
 3433              		.loc 1 275 0
 3434 0640 FEFFFFEB 		bl	ic_init
 276:../main.c     **** 		//COMPLETAR: utilizando el interfaz definido en intcontroller.h
 277:../main.c     **** 		//		habilitar la l�nea IRQ en modo no vectorizado
 278:../main.c     **** 		//		deshabilitar la l�nea FIQ
 279:../main.c     **** 		//		configurar la l�nea INT_TIMER0 en modo IRQ
 280:../main.c     **** 		//		configurar la l�nea INT_EINT4567 en modo IRQ
 281:../main.c     **** 		//		habilitar la l�nea INT_TIMER0
 282:../main.c     **** 		//		habilitar la l�nea INT_EINT4567
 283:../main.c     **** 		ic_conf_irq(ENABLE, VEC);
 3435              		.loc 1 283 0
 3436 0644 0100A0E3 		mov	r0, #1
 3437 0648 0010A0E3 		mov	r1, #0
 3438 064c FEFFFFEB 		bl	ic_conf_irq
 284:../main.c     **** 		ic_conf_fiq(DISABLE);
 3439              		.loc 1 284 0
 3440 0650 0000A0E3 		mov	r0, #0
 3441 0654 FEFFFFEB 		bl	ic_conf_fiq
 285:../main.c     **** 		ic_conf_line(INT_TIMER0, IRQ);
 3442              		.loc 1 285 0
 3443 0658 0D00A0E3 		mov	r0, #13
 3444 065c 0010A0E3 		mov	r1, #0
 3445 0660 FEFFFFEB 		bl	ic_conf_line
 286:../main.c     **** 		ic_conf_line(INT_TIMER1, IRQ);
 3446              		.loc 1 286 0
 3447 0664 0C00A0E3 		mov	r0, #12
 3448 0668 0010A0E3 		mov	r1, #0
 3449 066c FEFFFFEB 		bl	ic_conf_line
 287:../main.c     **** 		ic_conf_line(INT_EINT4567, IRQ);
 3450              		.loc 1 287 0
 3451 0670 1500A0E3 		mov	r0, #21
 3452 0674 0010A0E3 		mov	r1, #0
 3453 0678 FEFFFFEB 		bl	ic_conf_line
 288:../main.c     **** 		ic_enable(INT_TIMER0);
 3454              		.loc 1 288 0
 3455 067c 0D00A0E3 		mov	r0, #13
 3456 0680 FEFFFFEB 		bl	ic_enable
 289:../main.c     **** 		ic_enable(INT_TIMER1);
 3457              		.loc 1 289 0
 3458 0684 0C00A0E3 		mov	r0, #12
 3459 0688 FEFFFFEB 		bl	ic_enable
 290:../main.c     **** 		ic_enable(INT_EINT4567);
 3460              		.loc 1 290 0
 3461 068c 1500A0E3 		mov	r0, #21
 3462 0690 FEFFFFEB 		bl	ic_enable
 291:../main.c     **** 		ic_enable(INT_EINT1);
 3463              		.loc 1 291 0
 3464 0694 1800A0E3 		mov	r0, #24
 3465 0698 FEFFFFEB 		bl	ic_enable
 292:../main.c     **** 	/***************************************************/
 293:../main.c     **** 
 294:../main.c     **** 	Delay(0);
 3466              		.loc 1 294 0
 3467 069c 0000A0E3 		mov	r0, #0
 3468 06a0 FEFFFFEB 		bl	Delay
 295:../main.c     **** 	return 0;
 3469              		.loc 1 295 0
 3470 06a4 0030A0E3 		mov	r3, #0
 296:../main.c     **** }
 3471              		.loc 1 296 0
 3472 06a8 0300A0E1 		mov	r0, r3
 3473 06ac 0CD04BE2 		sub	sp, fp, #12
 3474 06b0 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3475 06b4 1EFF2FE1 		bx	lr
 3476              	.L36:
 3477              		.align	2
 3478              	.L35:
 3479 06b8 00000000 		.word	RL
 3480 06bc 00000000 		.word	cont
 3481 06c0 00000000 		.word	ocupado
 3482 06c4 00000000 		.word	cont2
 3483 06c8 24F40000 		.word	62500
 3484 06cc 1FF40000 		.word	62495
 3485 06d0 54FF7F0C 		.word	209715028
 3486 06d4 00000000 		.word	timer_ISR
 3487 06d8 50FF7F0C 		.word	209715024
 3488 06dc 00000000 		.word	timer1_ISR
 3489 06e0 74FF7F0C 		.word	209715060
 3490 06e4 00000000 		.word	button_ISR
 3491 06e8 80FF7F0C 		.word	209715072
 3492 06ec 00000000 		.word	keyboard_ISR
 3493              		.cfi_endproc
 3494              	.LFE4:
 3496              		.align	2
 3497              		.global	loop
 3499              	loop:
 3500              	.LFB5:
 297:../main.c     **** 
 298:../main.c     **** int loop(void)
 299:../main.c     **** {
 3501              		.loc 1 299 0
 3502              		.cfi_startproc
 3503              		@ Function supports interworking.
 3504              		@ args = 0, pretend = 0, frame = 0
 3505              		@ frame_needed = 1, uses_anonymous_args = 0
 3506 06f0 0DC0A0E1 		mov	ip, sp
 3507              	.LCFI10:
 3508              		.cfi_def_cfa_register 12
 3509 06f4 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3510 06f8 04B04CE2 		sub	fp, ip, #4
 3511              		.cfi_offset 14, -8
 3512              		.cfi_offset 13, -12
 3513              		.cfi_offset 11, -16
 3514              	.LCFI11:
 3515              		.cfi_def_cfa 11, 4
 300:../main.c     **** 	return 0;
 3516              		.loc 1 300 0
 3517 06fc 0030A0E3 		mov	r3, #0
 301:../main.c     **** }
 3518              		.loc 1 301 0
 3519 0700 0300A0E1 		mov	r0, r3
 3520 0704 0CD04BE2 		sub	sp, fp, #12
 3521 0708 00689DE8 		ldmfd	sp, {fp, sp, lr}
 3522 070c 1EFF2FE1 		bx	lr
 3523              		.cfi_endproc
 3524              	.LFE5:
 3526              		.align	2
 3527              		.global	main
 3529              	main:
 3530              	.LFB6:
 302:../main.c     **** 
 303:../main.c     **** 
 304:../main.c     **** int main(void)
 305:../main.c     **** {
 3531              		.loc 1 305 0
 3532              		.cfi_startproc
 3533              		@ Function supports interworking.
 3534              		@ args = 0, pretend = 0, frame = 0
 3535              		@ frame_needed = 1, uses_anonymous_args = 0
 3536 0710 0DC0A0E1 		mov	ip, sp
 3537              	.LCFI12:
 3538              		.cfi_def_cfa_register 12
 3539 0714 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 3540 0718 04B04CE2 		sub	fp, ip, #4
 3541              		.cfi_offset 14, -8
 3542              		.cfi_offset 13, -12
 3543              		.cfi_offset 11, -16
 3544              	.LCFI13:
 3545              		.cfi_def_cfa 11, 4
 306:../main.c     **** 	setup();
 3546              		.loc 1 306 0
 3547 071c FEFFFFEB 		bl	setup
 3548              	.L39:
 307:../main.c     **** 
 308:../main.c     **** 	while (1) {
 309:../main.c     **** 		loop();
 3549              		.loc 1 309 0 discriminator 1
 3550 0720 FEFFFFEB 		bl	loop
 310:../main.c     **** 	}
 3551              		.loc 1 310 0 discriminator 1
 3552 0724 FDFFFFEA 		b	.L39
 3553              		.cfi_endproc
 3554              	.LFE6:
 3556              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 main.c
C:\Users\ignac\AppData\Local\Temp\ccvByFZe.s:2760   .data:00000000 $d
C:\Users\ignac\AppData\Local\Temp\ccvByFZe.s:2763   .data:00000000 RL
                            *COM*:00000004 cont
                            *COM*:00000004 cont2
                            *COM*:00000004 two
                            *COM*:00000004 mode
                            *COM*:00000004 ocupado
C:\Users\ignac\AppData\Local\Temp\ccvByFZe.s:2774   .text:00000000 $a
C:\Users\ignac\AppData\Local\Temp\ccvByFZe.s:2777   .text:00000000 timer_ISR
C:\Users\ignac\AppData\Local\Temp\ccvByFZe.s:2876   .text:000000ec $d
C:\Users\ignac\AppData\Local\Temp\ccvByFZe.s:2882   .text:000000f8 $a
C:\Users\ignac\AppData\Local\Temp\ccvByFZe.s:2885   .text:000000f8 timer1_ISR
C:\Users\ignac\AppData\Local\Temp\ccvByFZe.s:2993   .text:00000200 $d
C:\Users\ignac\AppData\Local\Temp\ccvByFZe.s:2999   .text:0000020c $a
C:\Users\ignac\AppData\Local\Temp\ccvByFZe.s:3002   .text:0000020c button_ISR
C:\Users\ignac\AppData\Local\Temp\ccvByFZe.s:3158   .text:000003a4 $d
C:\Users\ignac\AppData\Local\Temp\ccvByFZe.s:3168   .text:000003c0 $a
C:\Users\ignac\AppData\Local\Temp\ccvByFZe.s:3171   .text:000003c0 keyboard_ISR
C:\Users\ignac\AppData\Local\Temp\ccvByFZe.s:3213   .text:00000408 $d
C:\Users\ignac\AppData\Local\Temp\ccvByFZe.s:3219   .text:00000418 $a
C:\Users\ignac\AppData\Local\Temp\ccvByFZe.s:3292   .text:000004d0 $d
C:\Users\ignac\AppData\Local\Temp\ccvByFZe.s:3302   .text:000004ec $a
C:\Users\ignac\AppData\Local\Temp\ccvByFZe.s:3305   .text:000004ec setup
C:\Users\ignac\AppData\Local\Temp\ccvByFZe.s:3479   .text:000006b8 $d
C:\Users\ignac\AppData\Local\Temp\ccvByFZe.s:3496   .text:000006f0 $a
C:\Users\ignac\AppData\Local\Temp\ccvByFZe.s:3499   .text:000006f0 loop
C:\Users\ignac\AppData\Local\Temp\ccvByFZe.s:3529   .text:00000710 main
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
D8Led_digit
ic_cleanflag
D8Led_segment
tmr_stop
tmr_start
Delay
kb_scan
tmr_set_divider
tmr_set_count
leds_init
D8Led_init
portG_conf
portG_eint_trig
portG_conf_pup
tmr_set_prescaler
tmr_update
tmr_set_mode
ic_init
ic_conf_irq
ic_conf_fiq
ic_conf_line
ic_enable
