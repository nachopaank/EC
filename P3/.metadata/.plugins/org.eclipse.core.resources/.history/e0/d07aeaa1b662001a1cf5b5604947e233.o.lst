   1              		.cpu arm7tdmi
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 18, 4
  11              		.file	"timer.c"
  21              	.Ltext0:
  22              		.file 1 "../timer.c"
 1698              		.align	2
 1699              		.global	tmr_set_prescaler
 1701              	tmr_set_prescaler:
 1702              	.LFB0:
   1:../timer.c    **** /*********************************************************************************************
   2:../timer.c    **** * Fichero:		timer.c
   3:../timer.c    **** * Descrip:		funciones de control del timer0 del s3c44b0x
   4:../timer.c    **** *********************************************************************************************/
   5:../timer.c    **** 
   6:../timer.c    **** /*--- ficheros de cabecera ---*/
   7:../timer.c    **** #include "44b.h"
   8:../timer.c    **** #include "timer.h"
   9:../timer.c    **** //23-16 temp 4-5
  10:../timer.c    **** //15-8 temp 2-3
  11:../timer.c    **** //7-0 temp 0-1
  12:../timer.c    **** int tmr_set_prescaler(int p, int  value)
  13:../timer.c    **** {
 1703              		.loc 1 13 0
 1704              		.cfi_startproc
 1705              		@ Function supports interworking.
 1706              		@ args = 0, pretend = 0, frame = 16
 1707              		@ frame_needed = 1, uses_anonymous_args = 0
 1708 0000 0DC0A0E1 		mov	ip, sp
 1709              	.LCFI0:
 1710              		.cfi_def_cfa_register 12
 1711 0004 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1712 0008 04B04CE2 		sub	fp, ip, #4
 1713              		.cfi_offset 14, -8
 1714              		.cfi_offset 13, -12
 1715              		.cfi_offset 11, -16
 1716              	.LCFI1:
 1717              		.cfi_def_cfa 11, 4
 1718 000c 10D04DE2 		sub	sp, sp, #16
 1719 0010 18000BE5 		str	r0, [fp, #-24]
 1720 0014 1C100BE5 		str	r1, [fp, #-28]
  14:../timer.c    **** 	int offset = p*8;
 1721              		.loc 1 14 0
 1722 0018 18301BE5 		ldr	r3, [fp, #-24]
 1723 001c 8331A0E1 		mov	r3, r3, asl #3
 1724 0020 10300BE5 		str	r3, [fp, #-16]
  15:../timer.c    **** 	value &= 0xFF;
 1725              		.loc 1 15 0
 1726 0024 1C301BE5 		ldr	r3, [fp, #-28]
 1727 0028 FF3003E2 		and	r3, r3, #255
 1728 002c 1C300BE5 		str	r3, [fp, #-28]
  16:../timer.c    **** 
  17:../timer.c    **** 	if (p < 0 || p > 3)
 1729              		.loc 1 17 0
 1730 0030 18301BE5 		ldr	r3, [fp, #-24]
 1731 0034 000053E3 		cmp	r3, #0
 1732 0038 020000BA 		blt	.L2
 1733              		.loc 1 17 0 is_stmt 0 discriminator 1
 1734 003c 18301BE5 		ldr	r3, [fp, #-24]
 1735 0040 030053E3 		cmp	r3, #3
 1736 0044 010000DA 		ble	.L3
 1737              	.L2:
  18:../timer.c    **** 		return -1;
 1738              		.loc 1 18 0 is_stmt 1
 1739 0048 0030E0E3 		mvn	r3, #0
 1740 004c 110000EA 		b	.L4
 1741              	.L3:
  19:../timer.c    **** 
  20:../timer.c    **** 	//COMPLETAR: escribir el valor value a partir de la posición offset en el
  21:../timer.c    **** 	//registro rTCFG0, para establecer el valor de pre-escalado del módulo p
  22:../timer.c    **** 
  23:../timer.c    **** 	rTCFG0 &= ~(value << offset);
 1742              		.loc 1 23 0
 1743 0050 50309FE5 		ldr	r3, .L5
 1744 0054 4C209FE5 		ldr	r2, .L5
 1745 0058 001092E5 		ldr	r1, [r2, #0]
 1746 005c 1C001BE5 		ldr	r0, [fp, #-28]
 1747 0060 10201BE5 		ldr	r2, [fp, #-16]
 1748 0064 1022A0E1 		mov	r2, r0, asl r2
 1749 0068 0220E0E1 		mvn	r2, r2
 1750 006c 022001E0 		and	r2, r1, r2
 1751 0070 002083E5 		str	r2, [r3, #0]
  24:../timer.c    **** 	rTCFG0 |= (value << offset);
 1752              		.loc 1 24 0
 1753 0074 2C309FE5 		ldr	r3, .L5
 1754 0078 28209FE5 		ldr	r2, .L5
 1755 007c 001092E5 		ldr	r1, [r2, #0]
 1756 0080 1C001BE5 		ldr	r0, [fp, #-28]
 1757 0084 10201BE5 		ldr	r2, [fp, #-16]
 1758 0088 1022A0E1 		mov	r2, r0, asl r2
 1759 008c 022081E1 		orr	r2, r1, r2
 1760 0090 002083E5 		str	r2, [r3, #0]
  25:../timer.c    **** 	return 0;
 1761              		.loc 1 25 0
 1762 0094 0030A0E3 		mov	r3, #0
 1763              	.L4:
  26:../timer.c    **** }
 1764              		.loc 1 26 0
 1765 0098 0300A0E1 		mov	r0, r3
 1766 009c 0CD04BE2 		sub	sp, fp, #12
 1767 00a0 00689DE8 		ldmfd	sp, {fp, sp, lr}
 1768 00a4 1EFF2FE1 		bx	lr
 1769              	.L6:
 1770              		.align	2
 1771              	.L5:
 1772 00a8 0000D501 		.word	30736384
 1773              		.cfi_endproc
 1774              	.LFE0:
 1776              		.align	2
 1777              		.global	tmr_set_divider
 1779              	tmr_set_divider:
 1780              	.LFB1:
  27:../timer.c    **** 
  28:../timer.c    **** int tmr_set_divider(int d, enum tmr_div div)
  29:../timer.c    **** {
 1781              		.loc 1 29 0
 1782              		.cfi_startproc
 1783              		@ Function supports interworking.
 1784              		@ args = 0, pretend = 0, frame = 16
 1785              		@ frame_needed = 1, uses_anonymous_args = 0
 1786 00ac 0DC0A0E1 		mov	ip, sp
 1787              	.LCFI2:
 1788              		.cfi_def_cfa_register 12
 1789 00b0 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1790 00b4 04B04CE2 		sub	fp, ip, #4
 1791              		.cfi_offset 14, -8
 1792              		.cfi_offset 13, -12
 1793              		.cfi_offset 11, -16
 1794              	.LCFI3:
 1795              		.cfi_def_cfa 11, 4
 1796 00b8 10D04DE2 		sub	sp, sp, #16
 1797 00bc 18000BE5 		str	r0, [fp, #-24]
 1798 00c0 0130A0E1 		mov	r3, r1
 1799 00c4 19304BE5 		strb	r3, [fp, #-25]
  30:../timer.c    **** 	int ret = 0;
 1800              		.loc 1 30 0
 1801 00c8 0030A0E3 		mov	r3, #0
 1802 00cc 10300BE5 		str	r3, [fp, #-16]
  31:../timer.c    **** 	int pos = d*4;
 1803              		.loc 1 31 0
 1804 00d0 18301BE5 		ldr	r3, [fp, #-24]
 1805 00d4 0331A0E1 		mov	r3, r3, asl #2
 1806 00d8 14300BE5 		str	r3, [fp, #-20]
  32:../timer.c    **** 
  33:../timer.c    **** 	if ((d < 0 || d > 5) ||
 1807              		.loc 1 33 0
 1808 00dc 18301BE5 		ldr	r3, [fp, #-24]
 1809 00e0 000053E3 		cmp	r3, #0
 1810 00e4 140000BA 		blt	.L8
 1811              		.loc 1 33 0 is_stmt 0 discriminator 1
 1812 00e8 18301BE5 		ldr	r3, [fp, #-24]
 1813 00ec 050053E3 		cmp	r3, #5
 1814 00f0 110000CA 		bgt	.L8
 1815 00f4 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 1816 00f8 040053E3 		cmp	r3, #4
 1817 00fc 0200001A 		bne	.L9
  34:../timer.c    **** 			(div == D1_32 && d > 3) ||
 1818              		.loc 1 34 0 is_stmt 1
 1819 0100 18301BE5 		ldr	r3, [fp, #-24]
 1820 0104 030053E3 		cmp	r3, #3
 1821 0108 0B0000CA 		bgt	.L8
 1822              	.L9:
 1823              		.loc 1 34 0 is_stmt 0 discriminator 1
 1824 010c 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 1825 0110 050053E3 		cmp	r3, #5
 1826 0114 0200001A 		bne	.L10
  35:../timer.c    **** 			(div == EXTCLK && d != 5) ||
 1827              		.loc 1 35 0 is_stmt 1
 1828 0118 18301BE5 		ldr	r3, [fp, #-24]
 1829 011c 050053E3 		cmp	r3, #5
 1830 0120 0500001A 		bne	.L8
 1831              	.L10:
 1832              		.loc 1 35 0 is_stmt 0 discriminator 1
 1833 0124 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 1834 0128 060053E3 		cmp	r3, #6
 1835 012c 0400001A 		bne	.L11
  36:../timer.c    **** 			(div == TCLK && d != 4))
 1836              		.loc 1 36 0 is_stmt 1
 1837 0130 18301BE5 		ldr	r3, [fp, #-24]
 1838 0134 040053E3 		cmp	r3, #4
 1839 0138 0100000A 		beq	.L11
 1840              	.L8:
  37:../timer.c    **** 		return -1;
 1841              		.loc 1 37 0
 1842 013c 0030E0E3 		mvn	r3, #0
 1843 0140 190000EA 		b	.L12
 1844              	.L11:
  38:../timer.c    **** 
  39:../timer.c    **** 	if (div == EXTCLK || div == TCLK)
 1845              		.loc 1 39 0
 1846 0144 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 1847 0148 050053E3 		cmp	r3, #5
 1848 014c 0200000A 		beq	.L13
 1849              		.loc 1 39 0 is_stmt 0 discriminator 1
 1850 0150 19305BE5 		ldrb	r3, [fp, #-25]	@ zero_extendqisi2
 1851 0154 060053E3 		cmp	r3, #6
 1852 0158 0100001A 		bne	.L14
 1853              	.L13:
  40:../timer.c    **** 		div = 4;
 1854              		.loc 1 40 0 is_stmt 1
 1855 015c 0430A0E3 		mov	r3, #4
 1856 0160 19304BE5 		strb	r3, [fp, #-25]
 1857              	.L14:
  41:../timer.c    **** 
  42:../timer.c    **** 	//COMPLETAR: escribir el valor div a partir de la posición pos en el
  43:../timer.c    **** 	//registro rTCFG1 para establecer el valor para el divisor d
  44:../timer.c    **** 	rTCFG1 &= ~(0x7 << pos);
 1858              		.loc 1 44 0
 1859 0164 50309FE5 		ldr	r3, .L15
 1860 0168 4C209FE5 		ldr	r2, .L15
 1861 016c 001092E5 		ldr	r1, [r2, #0]
 1862 0170 0700A0E3 		mov	r0, #7
 1863 0174 14201BE5 		ldr	r2, [fp, #-20]
 1864 0178 1022A0E1 		mov	r2, r0, asl r2
 1865 017c 0220E0E1 		mvn	r2, r2
 1866 0180 022001E0 		and	r2, r1, r2
 1867 0184 002083E5 		str	r2, [r3, #0]
  45:../timer.c    **** 	rTCFG1 |= (div << pos);
 1868              		.loc 1 45 0
 1869 0188 2C309FE5 		ldr	r3, .L15
 1870 018c 28209FE5 		ldr	r2, .L15
 1871 0190 001092E5 		ldr	r1, [r2, #0]
 1872 0194 19005BE5 		ldrb	r0, [fp, #-25]	@ zero_extendqisi2
 1873 0198 14201BE5 		ldr	r2, [fp, #-20]
 1874 019c 1022A0E1 		mov	r2, r0, asl r2
 1875 01a0 022081E1 		orr	r2, r1, r2
 1876 01a4 002083E5 		str	r2, [r3, #0]
  46:../timer.c    **** 	return 0;
 1877              		.loc 1 46 0
 1878 01a8 0030A0E3 		mov	r3, #0
 1879              	.L12:
  47:../timer.c    **** }
 1880              		.loc 1 47 0
 1881 01ac 0300A0E1 		mov	r0, r3
 1882 01b0 0CD04BE2 		sub	sp, fp, #12
 1883 01b4 00689DE8 		ldmfd	sp, {fp, sp, lr}
 1884 01b8 1EFF2FE1 		bx	lr
 1885              	.L16:
 1886              		.align	2
 1887              	.L15:
 1888 01bc 0400D501 		.word	30736388
 1889              		.cfi_endproc
 1890              	.LFE1:
 1892              		.align	2
 1893              		.global	tmr_set_count
 1895              	tmr_set_count:
 1896              	.LFB2:
  48:../timer.c    **** 
  49:../timer.c    **** int tmr_set_count(enum tmr_timer t, int count, int cmp)
  50:../timer.c    **** {
 1897              		.loc 1 50 0
 1898              		.cfi_startproc
 1899              		@ Function supports interworking.
 1900              		@ args = 0, pretend = 0, frame = 24
 1901              		@ frame_needed = 1, uses_anonymous_args = 0
 1902 01c0 0DC0A0E1 		mov	ip, sp
 1903              	.LCFI4:
 1904              		.cfi_def_cfa_register 12
 1905 01c4 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 1906 01c8 04B04CE2 		sub	fp, ip, #4
 1907              		.cfi_offset 14, -8
 1908              		.cfi_offset 13, -12
 1909              		.cfi_offset 11, -16
 1910              	.LCFI5:
 1911              		.cfi_def_cfa 11, 4
 1912 01cc 18D04DE2 		sub	sp, sp, #24
 1913 01d0 0030A0E1 		mov	r3, r0
 1914 01d4 1C100BE5 		str	r1, [fp, #-28]
 1915 01d8 20200BE5 		str	r2, [fp, #-32]
 1916 01dc 15304BE5 		strb	r3, [fp, #-21]
  51:../timer.c    **** 	int err = 0;
 1917              		.loc 1 51 0
 1918 01e0 0030A0E3 		mov	r3, #0
 1919 01e4 10300BE5 		str	r3, [fp, #-16]
  52:../timer.c    **** 	switch (t) {
 1920              		.loc 1 52 0
 1921 01e8 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 1922 01ec 050053E3 		cmp	r3, #5
 1923 01f0 03F19F97 		ldrls	pc, [pc, r3, asl #2]
 1924 01f4 2C0000EA 		b	.L18
 1925              	.L25:
 1926 01f8 10020000 		.word	.L19
 1927 01fc 2C020000 		.word	.L20
 1928 0200 48020000 		.word	.L21
 1929 0204 64020000 		.word	.L22
 1930 0208 80020000 		.word	.L23
 1931 020c 9C020000 		.word	.L24
 1932              	.L19:
  53:../timer.c    **** 		case TIMER0:
  54:../timer.c    **** 			rTCNTB0 = count;
 1933              		.loc 1 54 0
 1934 0210 B0309FE5 		ldr	r3, .L27
 1935 0214 1C201BE5 		ldr	r2, [fp, #-28]
 1936 0218 002083E5 		str	r2, [r3, #0]
  55:../timer.c    **** 			rTCMPB0 = cmp;
 1937              		.loc 1 55 0
 1938 021c A8309FE5 		ldr	r3, .L27+4
 1939 0220 20201BE5 		ldr	r2, [fp, #-32]
 1940 0224 002083E5 		str	r2, [r3, #0]
  56:../timer.c    **** 			//COMPLETAR: establecer el valor de cuenta count y el valor de
  57:../timer.c    **** 			//comparación cmp en los registros de buffer del timer0 (rTCNTB0 y
  58:../timer.c    **** 			//rTCMPB0)
  59:../timer.c    **** 			 break;
 1941              		.loc 1 59 0
 1942 0228 210000EA 		b	.L26
 1943              	.L20:
  60:../timer.c    **** 		case TIMER1:
  61:../timer.c    **** 			rTCNTB1 = count;
 1944              		.loc 1 61 0
 1945 022c 9C309FE5 		ldr	r3, .L27+8
 1946 0230 1C201BE5 		ldr	r2, [fp, #-28]
 1947 0234 002083E5 		str	r2, [r3, #0]
  62:../timer.c    **** 			rTCMPB1 = cmp;
 1948              		.loc 1 62 0
 1949 0238 94309FE5 		ldr	r3, .L27+12
 1950 023c 20201BE5 		ldr	r2, [fp, #-32]
 1951 0240 002083E5 		str	r2, [r3, #0]
  63:../timer.c    **** 			//COMPLETAR: establecer el valor de cuenta count y el valor de
  64:../timer.c    **** 			//comparación cmp en los registros de buffer del timer1 (rTCNTB1 y
  65:../timer.c    **** 			//rTCMPB1)
  66:../timer.c    **** 			 break;
 1952              		.loc 1 66 0
 1953 0244 1A0000EA 		b	.L26
 1954              	.L21:
  67:../timer.c    **** 		case TIMER2:
  68:../timer.c    **** 			rTCNTB2 = count;
 1955              		.loc 1 68 0
 1956 0248 88309FE5 		ldr	r3, .L27+16
 1957 024c 1C201BE5 		ldr	r2, [fp, #-28]
 1958 0250 002083E5 		str	r2, [r3, #0]
  69:../timer.c    **** 			rTCMPB2 = cmp;
 1959              		.loc 1 69 0
 1960 0254 80309FE5 		ldr	r3, .L27+20
 1961 0258 20201BE5 		ldr	r2, [fp, #-32]
 1962 025c 002083E5 		str	r2, [r3, #0]
  70:../timer.c    **** 			//COMPLETAR: establecer el valor de cuenta count y el valor de
  71:../timer.c    **** 			//comparación cmp en los registros de buffer del timer2 (rTCNTB2 y
  72:../timer.c    **** 			//rTCMPB2)
  73:../timer.c    **** 			 break;
 1963              		.loc 1 73 0
 1964 0260 130000EA 		b	.L26
 1965              	.L22:
  74:../timer.c    **** 		case TIMER3:
  75:../timer.c    **** 			rTCNTB3 = count;
 1966              		.loc 1 75 0
 1967 0264 74309FE5 		ldr	r3, .L27+24
 1968 0268 1C201BE5 		ldr	r2, [fp, #-28]
 1969 026c 002083E5 		str	r2, [r3, #0]
  76:../timer.c    **** 			rTCMPB3 = cmp;
 1970              		.loc 1 76 0
 1971 0270 6C309FE5 		ldr	r3, .L27+28
 1972 0274 20201BE5 		ldr	r2, [fp, #-32]
 1973 0278 002083E5 		str	r2, [r3, #0]
  77:../timer.c    **** 			//COMPLETAR: establecer el valor de cuenta count y el valor de
  78:../timer.c    **** 			//comparación cmp en los registros de buffer del timer3 (rTCNTB3 y
  79:../timer.c    **** 			//rTCMPB3)
  80:../timer.c    **** 			 break;
 1974              		.loc 1 80 0
 1975 027c 0C0000EA 		b	.L26
 1976              	.L23:
  81:../timer.c    **** 		case TIMER4:
  82:../timer.c    **** 			rTCNTB4 = count;
 1977              		.loc 1 82 0
 1978 0280 60309FE5 		ldr	r3, .L27+32
 1979 0284 1C201BE5 		ldr	r2, [fp, #-28]
 1980 0288 002083E5 		str	r2, [r3, #0]
  83:../timer.c    **** 			rTCMPB4 = cmp;
 1981              		.loc 1 83 0
 1982 028c 58309FE5 		ldr	r3, .L27+36
 1983 0290 20201BE5 		ldr	r2, [fp, #-32]
 1984 0294 002083E5 		str	r2, [r3, #0]
  84:../timer.c    **** 			//COMPLETAR: establecer el valor de cuenta count y el valor de
  85:../timer.c    **** 			//comparación cmp en los registros de buffer del timer4 (rTCNTB4 y
  86:../timer.c    **** 			//rTCMPB4)
  87:../timer.c    **** 			 break;
 1985              		.loc 1 87 0
 1986 0298 050000EA 		b	.L26
 1987              	.L24:
  88:../timer.c    **** 		case TIMER5:
  89:../timer.c    **** 			rTCNTB5 = count;
 1988              		.loc 1 89 0
 1989 029c 4C309FE5 		ldr	r3, .L27+40
 1990 02a0 1C201BE5 		ldr	r2, [fp, #-28]
 1991 02a4 002083E5 		str	r2, [r3, #0]
  90:../timer.c    **** 			//COMPLETAR: establecer el valor de cuenta count en el registro de 
  91:../timer.c    **** 			//buffer del timer5 (rTCNTB5)
  92:../timer.c    **** 			 break;
 1992              		.loc 1 92 0
 1993 02a8 010000EA 		b	.L26
 1994              	.L18:
  93:../timer.c    **** 		default:
  94:../timer.c    **** 			err = -1;
 1995              		.loc 1 94 0
 1996 02ac 0030E0E3 		mvn	r3, #0
 1997 02b0 10300BE5 		str	r3, [fp, #-16]
 1998              	.L26:
  95:../timer.c    **** 	}
  96:../timer.c    **** 
  97:../timer.c    **** 	return err;
 1999              		.loc 1 97 0
 2000 02b4 10301BE5 		ldr	r3, [fp, #-16]
  98:../timer.c    **** }
 2001              		.loc 1 98 0
 2002 02b8 0300A0E1 		mov	r0, r3
 2003 02bc 0CD04BE2 		sub	sp, fp, #12
 2004 02c0 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2005 02c4 1EFF2FE1 		bx	lr
 2006              	.L28:
 2007              		.align	2
 2008              	.L27:
 2009 02c8 0C00D501 		.word	30736396
 2010 02cc 1000D501 		.word	30736400
 2011 02d0 1800D501 		.word	30736408
 2012 02d4 1C00D501 		.word	30736412
 2013 02d8 2400D501 		.word	30736420
 2014 02dc 2800D501 		.word	30736424
 2015 02e0 3000D501 		.word	30736432
 2016 02e4 3400D501 		.word	30736436
 2017 02e8 3C00D501 		.word	30736444
 2018 02ec 4000D501 		.word	30736448
 2019 02f0 4800D501 		.word	30736456
 2020              		.cfi_endproc
 2021              	.LFE2:
 2023              		.align	2
 2024              		.global	tmr_update
 2026              	tmr_update:
 2027              	.LFB3:
  99:../timer.c    **** 
 100:../timer.c    **** int tmr_update(enum tmr_timer t)
 101:../timer.c    **** {
 2028              		.loc 1 101 0
 2029              		.cfi_startproc
 2030              		@ Function supports interworking.
 2031              		@ args = 0, pretend = 0, frame = 16
 2032              		@ frame_needed = 1, uses_anonymous_args = 0
 2033 02f4 0DC0A0E1 		mov	ip, sp
 2034              	.LCFI6:
 2035              		.cfi_def_cfa_register 12
 2036 02f8 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2037 02fc 04B04CE2 		sub	fp, ip, #4
 2038              		.cfi_offset 14, -8
 2039              		.cfi_offset 13, -12
 2040              		.cfi_offset 11, -16
 2041              	.LCFI7:
 2042              		.cfi_def_cfa 11, 4
 2043 0300 10D04DE2 		sub	sp, sp, #16
 2044 0304 0030A0E1 		mov	r3, r0
 2045 0308 15304BE5 		strb	r3, [fp, #-21]
 102:../timer.c    **** 	int pos = t*4;
 2046              		.loc 1 102 0
 2047 030c 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2048 0310 0331A0E1 		mov	r3, r3, asl #2
 2049 0314 10300BE5 		str	r3, [fp, #-16]
 103:../timer.c    **** 	if (t > 0)
 2050              		.loc 1 103 0
 2051 0318 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2052 031c 000053E3 		cmp	r3, #0
 2053 0320 0200000A 		beq	.L30
 104:../timer.c    **** 		pos += 4;
 2054              		.loc 1 104 0
 2055 0324 10301BE5 		ldr	r3, [fp, #-16]
 2056 0328 043083E2 		add	r3, r3, #4
 2057 032c 10300BE5 		str	r3, [fp, #-16]
 2058              	.L30:
 105:../timer.c    **** 
 106:../timer.c    **** 	if (t < 0 || t > 5)
 2059              		.loc 1 106 0
 2060 0330 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2061 0334 050053E3 		cmp	r3, #5
 2062 0338 0100009A 		bls	.L31
 107:../timer.c    **** 		return -1;
 2063              		.loc 1 107 0
 2064 033c 0030E0E3 		mvn	r3, #0
 2065 0340 110000EA 		b	.L32
 2066              	.L31:
 108:../timer.c    **** 
 109:../timer.c    **** 	//COMPLETAR: poner a 1 en el registro rTCON el bit indicado por pos 
 110:../timer.c    **** 	// y justo después ponerlo a 0 (deben ser stores distintos, lo hacemos con
 111:../timer.c    **** 	// sentencias C distintas)
 112:../timer.c    **** 	rTCON |= (0x2 << pos);
 2067              		.loc 1 112 0
 2068 0344 50309FE5 		ldr	r3, .L33
 2069 0348 4C209FE5 		ldr	r2, .L33
 2070 034c 001092E5 		ldr	r1, [r2, #0]
 2071 0350 0200A0E3 		mov	r0, #2
 2072 0354 10201BE5 		ldr	r2, [fp, #-16]
 2073 0358 1022A0E1 		mov	r2, r0, asl r2
 2074 035c 022081E1 		orr	r2, r1, r2
 2075 0360 002083E5 		str	r2, [r3, #0]
 113:../timer.c    **** 	rTCON &= ~(0x2 << pos);
 2076              		.loc 1 113 0
 2077 0364 30309FE5 		ldr	r3, .L33
 2078 0368 2C209FE5 		ldr	r2, .L33
 2079 036c 001092E5 		ldr	r1, [r2, #0]
 2080 0370 0200A0E3 		mov	r0, #2
 2081 0374 10201BE5 		ldr	r2, [fp, #-16]
 2082 0378 1022A0E1 		mov	r2, r0, asl r2
 2083 037c 0220E0E1 		mvn	r2, r2
 2084 0380 022001E0 		and	r2, r1, r2
 2085 0384 002083E5 		str	r2, [r3, #0]
 114:../timer.c    **** 	return 0;
 2086              		.loc 1 114 0
 2087 0388 0030A0E3 		mov	r3, #0
 2088              	.L32:
 115:../timer.c    **** }
 2089              		.loc 1 115 0
 2090 038c 0300A0E1 		mov	r0, r3
 2091 0390 0CD04BE2 		sub	sp, fp, #12
 2092 0394 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2093 0398 1EFF2FE1 		bx	lr
 2094              	.L34:
 2095              		.align	2
 2096              	.L33:
 2097 039c 0800D501 		.word	30736392
 2098              		.cfi_endproc
 2099              	.LFE3:
 2101              		.align	2
 2102              		.global	tmr_set_mode
 2104              	tmr_set_mode:
 2105              	.LFB4:
 116:../timer.c    **** 
 117:../timer.c    **** int tmr_set_mode(enum tmr_timer t, enum tmr_mode mode)
 118:../timer.c    **** {
 2106              		.loc 1 118 0
 2107              		.cfi_startproc
 2108              		@ Function supports interworking.
 2109              		@ args = 0, pretend = 0, frame = 16
 2110              		@ frame_needed = 1, uses_anonymous_args = 0
 2111 03a0 0DC0A0E1 		mov	ip, sp
 2112              	.LCFI8:
 2113              		.cfi_def_cfa_register 12
 2114 03a4 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2115 03a8 04B04CE2 		sub	fp, ip, #4
 2116              		.cfi_offset 14, -8
 2117              		.cfi_offset 13, -12
 2118              		.cfi_offset 11, -16
 2119              	.LCFI9:
 2120              		.cfi_def_cfa 11, 4
 2121 03ac 10D04DE2 		sub	sp, sp, #16
 2122 03b0 0020A0E1 		mov	r2, r0
 2123 03b4 0130A0E1 		mov	r3, r1
 2124 03b8 15204BE5 		strb	r2, [fp, #-21]
 2125 03bc 16304BE5 		strb	r3, [fp, #-22]
 119:../timer.c    **** 	int err = 0;
 2126              		.loc 1 119 0
 2127 03c0 0030A0E3 		mov	r3, #0
 2128 03c4 10300BE5 		str	r3, [fp, #-16]
 120:../timer.c    **** 	int pos = t*4;
 2129              		.loc 1 120 0
 2130 03c8 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2131 03cc 0331A0E1 		mov	r3, r3, asl #2
 2132 03d0 14300BE5 		str	r3, [fp, #-20]
 121:../timer.c    **** 	if (t > 0)
 2133              		.loc 1 121 0
 2134 03d4 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2135 03d8 000053E3 		cmp	r3, #0
 2136 03dc 0200000A 		beq	.L36
 122:../timer.c    **** 		pos += 4;
 2137              		.loc 1 122 0
 2138 03e0 14301BE5 		ldr	r3, [fp, #-20]
 2139 03e4 043083E2 		add	r3, r3, #4
 2140 03e8 14300BE5 		str	r3, [fp, #-20]
 2141              	.L36:
 123:../timer.c    **** 
 124:../timer.c    **** 	if (t < 0 || t > 5)
 2142              		.loc 1 124 0
 2143 03ec 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2144 03f0 050053E3 		cmp	r3, #5
 2145 03f4 0100009A 		bls	.L37
 125:../timer.c    **** 		return -1;
 2146              		.loc 1 125 0
 2147 03f8 0030E0E3 		mvn	r3, #0
 2148 03fc 1B0000EA 		b	.L38
 2149              	.L37:
 126:../timer.c    **** 
 127:../timer.c    **** 	if (mode == ONE_SHOT)
 2150              		.loc 1 127 0
 2151 0400 16305BE5 		ldrb	r3, [fp, #-22]	@ zero_extendqisi2
 2152 0404 000053E3 		cmp	r3, #0
 2153 0408 0900001A 		bne	.L39
 128:../timer.c    **** 		rTCON &= ~(0x8 << pos);
 2154              		.loc 1 128 0
 2155 040c 6C309FE5 		ldr	r3, .L42
 2156 0410 68209FE5 		ldr	r2, .L42
 2157 0414 001092E5 		ldr	r1, [r2, #0]
 2158 0418 0800A0E3 		mov	r0, #8
 2159 041c 14201BE5 		ldr	r2, [fp, #-20]
 2160 0420 1022A0E1 		mov	r2, r0, asl r2
 2161 0424 0220E0E1 		mvn	r2, r2
 2162 0428 022001E0 		and	r2, r1, r2
 2163 042c 002083E5 		str	r2, [r3, #0]
 2164 0430 0D0000EA 		b	.L40
 2165              	.L39:
 129:../timer.c    **** 		//COMPLETAR: poner a 0 el bit autoreload a partir de la posición pos (es
 130:../timer.c    **** 		//el cuarto bit a partir de esa posición)
 131:../timer.c    **** 	else if (mode == RELOAD)
 2166              		.loc 1 131 0
 2167 0434 16305BE5 		ldrb	r3, [fp, #-22]	@ zero_extendqisi2
 2168 0438 010053E3 		cmp	r3, #1
 2169 043c 0800001A 		bne	.L41
 132:../timer.c    **** 		rTCON |= (0x8 << pos);
 2170              		.loc 1 132 0
 2171 0440 38309FE5 		ldr	r3, .L42
 2172 0444 34209FE5 		ldr	r2, .L42
 2173 0448 001092E5 		ldr	r1, [r2, #0]
 2174 044c 0800A0E3 		mov	r0, #8
 2175 0450 14201BE5 		ldr	r2, [fp, #-20]
 2176 0454 1022A0E1 		mov	r2, r0, asl r2
 2177 0458 022081E1 		orr	r2, r1, r2
 2178 045c 002083E5 		str	r2, [r3, #0]
 2179 0460 010000EA 		b	.L40
 2180              	.L41:
 133:../timer.c    **** 		//COMPLETAR: poner a 1 el bit autoreload a partir de la posición pos (es
 134:../timer.c    **** 		//el cuarto bit a partir de esa posición)
 135:../timer.c    **** 	else
 136:../timer.c    **** 		err = -1;
 2181              		.loc 1 136 0
 2182 0464 0030E0E3 		mvn	r3, #0
 2183 0468 10300BE5 		str	r3, [fp, #-16]
 2184              	.L40:
 137:../timer.c    **** 
 138:../timer.c    **** 	return err;
 2185              		.loc 1 138 0
 2186 046c 10301BE5 		ldr	r3, [fp, #-16]
 2187              	.L38:
 139:../timer.c    **** }
 2188              		.loc 1 139 0
 2189 0470 0300A0E1 		mov	r0, r3
 2190 0474 0CD04BE2 		sub	sp, fp, #12
 2191 0478 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2192 047c 1EFF2FE1 		bx	lr
 2193              	.L43:
 2194              		.align	2
 2195              	.L42:
 2196 0480 0800D501 		.word	30736392
 2197              		.cfi_endproc
 2198              	.LFE4:
 2200              		.align	2
 2201              		.global	tmr_start
 2203              	tmr_start:
 2204              	.LFB5:
 140:../timer.c    **** 
 141:../timer.c    **** int tmr_start(enum tmr_timer t)
 142:../timer.c    **** {
 2205              		.loc 1 142 0
 2206              		.cfi_startproc
 2207              		@ Function supports interworking.
 2208              		@ args = 0, pretend = 0, frame = 16
 2209              		@ frame_needed = 1, uses_anonymous_args = 0
 2210 0484 0DC0A0E1 		mov	ip, sp
 2211              	.LCFI10:
 2212              		.cfi_def_cfa_register 12
 2213 0488 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2214 048c 04B04CE2 		sub	fp, ip, #4
 2215              		.cfi_offset 14, -8
 2216              		.cfi_offset 13, -12
 2217              		.cfi_offset 11, -16
 2218              	.LCFI11:
 2219              		.cfi_def_cfa 11, 4
 2220 0490 10D04DE2 		sub	sp, sp, #16
 2221 0494 0030A0E1 		mov	r3, r0
 2222 0498 15304BE5 		strb	r3, [fp, #-21]
 143:../timer.c    **** 	int pos = t*4;
 2223              		.loc 1 143 0
 2224 049c 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2225 04a0 0331A0E1 		mov	r3, r3, asl #2
 2226 04a4 10300BE5 		str	r3, [fp, #-16]
 144:../timer.c    **** 	if (t > 0)
 2227              		.loc 1 144 0
 2228 04a8 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2229 04ac 000053E3 		cmp	r3, #0
 2230 04b0 0200000A 		beq	.L45
 145:../timer.c    **** 		pos += 4;
 2231              		.loc 1 145 0
 2232 04b4 10301BE5 		ldr	r3, [fp, #-16]
 2233 04b8 043083E2 		add	r3, r3, #4
 2234 04bc 10300BE5 		str	r3, [fp, #-16]
 2235              	.L45:
 146:../timer.c    **** 
 147:../timer.c    **** 	if (t < 0 || t > 5)
 2236              		.loc 1 147 0
 2237 04c0 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2238 04c4 050053E3 		cmp	r3, #5
 2239 04c8 0100009A 		bls	.L46
 148:../timer.c    **** 		return -1;
 2240              		.loc 1 148 0
 2241 04cc 0030E0E3 		mvn	r3, #0
 2242 04d0 080000EA 		b	.L47
 2243              	.L46:
 149:../timer.c    **** 	rTCON |= (0x1 << pos);
 2244              		.loc 1 149 0
 2245 04d4 2C309FE5 		ldr	r3, .L48
 2246 04d8 28209FE5 		ldr	r2, .L48
 2247 04dc 001092E5 		ldr	r1, [r2, #0]
 2248 04e0 0100A0E3 		mov	r0, #1
 2249 04e4 10201BE5 		ldr	r2, [fp, #-16]
 2250 04e8 1022A0E1 		mov	r2, r0, asl r2
 2251 04ec 022081E1 		orr	r2, r1, r2
 2252 04f0 002083E5 		str	r2, [r3, #0]
 150:../timer.c    **** 	//COMPLETAR: poner a 1 el bit de start a partir de la posición pos en el
 151:../timer.c    **** 	//registro rTCON (es el primer bit del grupo)
 152:../timer.c    **** 	return 0;
 2253              		.loc 1 152 0
 2254 04f4 0030A0E3 		mov	r3, #0
 2255              	.L47:
 153:../timer.c    **** }
 2256              		.loc 1 153 0
 2257 04f8 0300A0E1 		mov	r0, r3
 2258 04fc 0CD04BE2 		sub	sp, fp, #12
 2259 0500 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2260 0504 1EFF2FE1 		bx	lr
 2261              	.L49:
 2262              		.align	2
 2263              	.L48:
 2264 0508 0800D501 		.word	30736392
 2265              		.cfi_endproc
 2266              	.LFE5:
 2268              		.align	2
 2269              		.global	tmr_stop
 2271              	tmr_stop:
 2272              	.LFB6:
 154:../timer.c    **** 
 155:../timer.c    **** int tmr_stop(enum tmr_timer t)
 156:../timer.c    **** {
 2273              		.loc 1 156 0
 2274              		.cfi_startproc
 2275              		@ Function supports interworking.
 2276              		@ args = 0, pretend = 0, frame = 16
 2277              		@ frame_needed = 1, uses_anonymous_args = 0
 2278 050c 0DC0A0E1 		mov	ip, sp
 2279              	.LCFI12:
 2280              		.cfi_def_cfa_register 12
 2281 0510 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2282 0514 04B04CE2 		sub	fp, ip, #4
 2283              		.cfi_offset 14, -8
 2284              		.cfi_offset 13, -12
 2285              		.cfi_offset 11, -16
 2286              	.LCFI13:
 2287              		.cfi_def_cfa 11, 4
 2288 0518 10D04DE2 		sub	sp, sp, #16
 2289 051c 0030A0E1 		mov	r3, r0
 2290 0520 15304BE5 		strb	r3, [fp, #-21]
 157:../timer.c    **** 	int pos = t*4;
 2291              		.loc 1 157 0
 2292 0524 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2293 0528 0331A0E1 		mov	r3, r3, asl #2
 2294 052c 10300BE5 		str	r3, [fp, #-16]
 158:../timer.c    **** 	if (t > 0)
 2295              		.loc 1 158 0
 2296 0530 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2297 0534 000053E3 		cmp	r3, #0
 2298 0538 0200000A 		beq	.L51
 159:../timer.c    **** 		pos += 4;
 2299              		.loc 1 159 0
 2300 053c 10301BE5 		ldr	r3, [fp, #-16]
 2301 0540 043083E2 		add	r3, r3, #4
 2302 0544 10300BE5 		str	r3, [fp, #-16]
 2303              	.L51:
 160:../timer.c    **** 
 161:../timer.c    **** 	if (t < 0 || t > 5)
 2304              		.loc 1 161 0
 2305 0548 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2306 054c 050053E3 		cmp	r3, #5
 2307 0550 0100009A 		bls	.L52
 162:../timer.c    **** 		return -1;
 2308              		.loc 1 162 0
 2309 0554 0030E0E3 		mvn	r3, #0
 2310 0558 090000EA 		b	.L53
 2311              	.L52:
 163:../timer.c    **** 	rTCON &= ~(0x1 << pos);
 2312              		.loc 1 163 0
 2313 055c 30309FE5 		ldr	r3, .L54
 2314 0560 2C209FE5 		ldr	r2, .L54
 2315 0564 001092E5 		ldr	r1, [r2, #0]
 2316 0568 0100A0E3 		mov	r0, #1
 2317 056c 10201BE5 		ldr	r2, [fp, #-16]
 2318 0570 1022A0E1 		mov	r2, r0, asl r2
 2319 0574 0220E0E1 		mvn	r2, r2
 2320 0578 022001E0 		and	r2, r1, r2
 2321 057c 002083E5 		str	r2, [r3, #0]
 164:../timer.c    **** 	//COMPLETAR: poner a 0 el bit de start a partir de la posición pos en el
 165:../timer.c    **** 	//registro rTCON (es el primer bit del grupo)
 166:../timer.c    **** 	return 0;
 2322              		.loc 1 166 0
 2323 0580 0030A0E3 		mov	r3, #0
 2324              	.L53:
 167:../timer.c    **** }
 2325              		.loc 1 167 0
 2326 0584 0300A0E1 		mov	r0, r3
 2327 0588 0CD04BE2 		sub	sp, fp, #12
 2328 058c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2329 0590 1EFF2FE1 		bx	lr
 2330              	.L55:
 2331              		.align	2
 2332              	.L54:
 2333 0594 0800D501 		.word	30736392
 2334              		.cfi_endproc
 2335              	.LFE6:
 2337              		.align	2
 2338              		.global	tmr_isrunning
 2340              	tmr_isrunning:
 2341              	.LFB7:
 168:../timer.c    **** 
 169:../timer.c    **** int tmr_isrunning(enum tmr_timer t)
 170:../timer.c    **** {
 2342              		.loc 1 170 0
 2343              		.cfi_startproc
 2344              		@ Function supports interworking.
 2345              		@ args = 0, pretend = 0, frame = 16
 2346              		@ frame_needed = 1, uses_anonymous_args = 0
 2347 0598 0DC0A0E1 		mov	ip, sp
 2348              	.LCFI14:
 2349              		.cfi_def_cfa_register 12
 2350 059c 00D82DE9 		stmfd	sp!, {fp, ip, lr, pc}
 2351 05a0 04B04CE2 		sub	fp, ip, #4
 2352              		.cfi_offset 14, -8
 2353              		.cfi_offset 13, -12
 2354              		.cfi_offset 11, -16
 2355              	.LCFI15:
 2356              		.cfi_def_cfa 11, 4
 2357 05a4 10D04DE2 		sub	sp, sp, #16
 2358 05a8 0030A0E1 		mov	r3, r0
 2359 05ac 15304BE5 		strb	r3, [fp, #-21]
 171:../timer.c    **** 	int ret = 0;
 2360              		.loc 1 171 0
 2361 05b0 0030A0E3 		mov	r3, #0
 2362 05b4 10300BE5 		str	r3, [fp, #-16]
 172:../timer.c    **** 	int pos = t*4;
 2363              		.loc 1 172 0
 2364 05b8 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2365 05bc 0331A0E1 		mov	r3, r3, asl #2
 2366 05c0 14300BE5 		str	r3, [fp, #-20]
 173:../timer.c    **** 	if (t > 0)
 2367              		.loc 1 173 0
 2368 05c4 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2369 05c8 000053E3 		cmp	r3, #0
 2370 05cc 0200000A 		beq	.L57
 174:../timer.c    **** 		pos += 4;
 2371              		.loc 1 174 0
 2372 05d0 14301BE5 		ldr	r3, [fp, #-20]
 2373 05d4 043083E2 		add	r3, r3, #4
 2374 05d8 14300BE5 		str	r3, [fp, #-20]
 2375              	.L57:
 175:../timer.c    **** 
 176:../timer.c    **** 	if ((t >= 0) && (t <= 5) 
 2376              		.loc 1 176 0
 2377 05dc 15305BE5 		ldrb	r3, [fp, #-21]	@ zero_extendqisi2
 2378 05e0 050053E3 		cmp	r3, #5
 2379 05e4 0900008A 		bhi	.L58
 177:../timer.c    **** 			&& (rTCON & (0x1 << pos)))
 2380              		.loc 1 177 0
 2381 05e8 34309FE5 		ldr	r3, .L59
 2382 05ec 002093E5 		ldr	r2, [r3, #0]
 2383 05f0 0110A0E3 		mov	r1, #1
 2384 05f4 14301BE5 		ldr	r3, [fp, #-20]
 2385 05f8 1133A0E1 		mov	r3, r1, asl r3
 2386 05fc 033002E0 		and	r3, r2, r3
 2387 0600 000053E3 		cmp	r3, #0
 2388 0604 0100000A 		beq	.L58
 178:../timer.c    **** 		ret = 1;
 2389              		.loc 1 178 0
 2390 0608 0130A0E3 		mov	r3, #1
 2391 060c 10300BE5 		str	r3, [fp, #-16]
 2392              	.L58:
 179:../timer.c    **** 
 180:../timer.c    **** 	return ret;
 2393              		.loc 1 180 0
 2394 0610 10301BE5 		ldr	r3, [fp, #-16]
 181:../timer.c    **** }
 2395              		.loc 1 181 0
 2396 0614 0300A0E1 		mov	r0, r3
 2397 0618 0CD04BE2 		sub	sp, fp, #12
 2398 061c 00689DE8 		ldmfd	sp, {fp, sp, lr}
 2399 0620 1EFF2FE1 		bx	lr
 2400              	.L60:
 2401              		.align	2
 2402              	.L59:
 2403 0624 0800D501 		.word	30736392
 2404              		.cfi_endproc
 2405              	.LFE7:
 2407              	.Letext0:
DEFINED SYMBOLS
                            *ABS*:00000000 timer.c
C:\Users\ignac\AppData\Local\Temp\cconxxfO.s:1698   .text:00000000 $a
C:\Users\ignac\AppData\Local\Temp\cconxxfO.s:1701   .text:00000000 tmr_set_prescaler
C:\Users\ignac\AppData\Local\Temp\cconxxfO.s:1772   .text:000000a8 $d
C:\Users\ignac\AppData\Local\Temp\cconxxfO.s:1776   .text:000000ac $a
C:\Users\ignac\AppData\Local\Temp\cconxxfO.s:1779   .text:000000ac tmr_set_divider
C:\Users\ignac\AppData\Local\Temp\cconxxfO.s:1888   .text:000001bc $d
C:\Users\ignac\AppData\Local\Temp\cconxxfO.s:1892   .text:000001c0 $a
C:\Users\ignac\AppData\Local\Temp\cconxxfO.s:1895   .text:000001c0 tmr_set_count
C:\Users\ignac\AppData\Local\Temp\cconxxfO.s:1926   .text:000001f8 $d
C:\Users\ignac\AppData\Local\Temp\cconxxfO.s:1934   .text:00000210 $a
C:\Users\ignac\AppData\Local\Temp\cconxxfO.s:2009   .text:000002c8 $d
C:\Users\ignac\AppData\Local\Temp\cconxxfO.s:2023   .text:000002f4 $a
C:\Users\ignac\AppData\Local\Temp\cconxxfO.s:2026   .text:000002f4 tmr_update
C:\Users\ignac\AppData\Local\Temp\cconxxfO.s:2097   .text:0000039c $d
C:\Users\ignac\AppData\Local\Temp\cconxxfO.s:2101   .text:000003a0 $a
C:\Users\ignac\AppData\Local\Temp\cconxxfO.s:2104   .text:000003a0 tmr_set_mode
C:\Users\ignac\AppData\Local\Temp\cconxxfO.s:2196   .text:00000480 $d
C:\Users\ignac\AppData\Local\Temp\cconxxfO.s:2200   .text:00000484 $a
C:\Users\ignac\AppData\Local\Temp\cconxxfO.s:2203   .text:00000484 tmr_start
C:\Users\ignac\AppData\Local\Temp\cconxxfO.s:2264   .text:00000508 $d
C:\Users\ignac\AppData\Local\Temp\cconxxfO.s:2268   .text:0000050c $a
C:\Users\ignac\AppData\Local\Temp\cconxxfO.s:2271   .text:0000050c tmr_stop
C:\Users\ignac\AppData\Local\Temp\cconxxfO.s:2333   .text:00000594 $d
C:\Users\ignac\AppData\Local\Temp\cconxxfO.s:2337   .text:00000598 $a
C:\Users\ignac\AppData\Local\Temp\cconxxfO.s:2340   .text:00000598 tmr_isrunning
C:\Users\ignac\AppData\Local\Temp\cconxxfO.s:2403   .text:00000624 $d
                     .debug_frame:00000010 $d

NO UNDEFINED SYMBOLS
